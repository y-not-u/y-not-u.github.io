<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王豆豆的人生旅途</title>
  
  <subtitle>vogan&#39;s blog</subtitle>
  <link href="https://www.vatery.com/atom.xml" rel="self"/>
  
  <link href="https://www.vatery.com/"/>
  <updated>2025-01-30T04:32:15.186Z</updated>
  <id>https://www.vatery.com/</id>
  
  <author>
    <name>Vogan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows 上的平铺桌面管理器 GlazeWM</title>
    <link href="https://www.vatery.com/2025/01/30/introduction-to-GlazeWM/"/>
    <id>https://www.vatery.com/2025/01/30/introduction-to-GlazeWM/</id>
    <published>2025-01-30T04:23:25.000Z</published>
    <updated>2025-01-30T04:32:15.186Z</updated>
    
    <content type="html"><![CDATA[<p>我之前的 Web 开发工作，是可以完全在 Linux 上完成的。使用的是 Arch Linux 发行版搭配 Hyprland 平铺桌面，拥有最完善的 Wiki 和最丰富的软件源，凭借 Linux 的开放性，能够做到极致的个性化。</p><p>但是由于目前需要开发鸿蒙 App，只能更换到 Windows 上使用 DevEco Studio IDE 进行开发。于我而言，最离不开的还是<strong>平铺桌面</strong>。其次是<strong>命令终端</strong>。</p><p>之前尝试过 komorebi，感觉不是很顺手，然后切换到 GlazeWM。感觉瞬间回来了！</p><p><img src="/2025/01/30/introduction-to-GlazeWM/GlazeWM-Demo.webp" alt="demo"></p><span id="more"></span><p>仓库地址：<a href="https://github.com/glzr-io/glazewm">https://github.com/glzr-io/glazewm</a></p><div class="tip">由于 release 版本和仓库最新的 main 分支代码有所区别，所以功能以及键位有差别。（例如最新的代码支持设置透明度 `set-opacity`，截至 2025.01.20 最新 release <b>v3.7.0</b> 并无该功能）</div><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>使用 yaml 配置文件</li><li>支持多显示器</li><li>针对 window 的自定义 rules</li><li>一键快速安装</li><li>能够和 Zebar 状态栏搭配运行</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>推荐通过 winget 进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winget install GlazeWM</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>官方提供了一份配置 <a href="https://github.com/glzr-io/glazewm/blob/main/resources/assets/sample-config.yaml">sample-config.yaml</a>可供参考。</p><p>如果希望有一些额外的个性化设置，下面的内容或许对你有所帮助。</p><p>Windows 上安装后默认的配置目录是 <code>~/.glzr/glazewm/config.yaml</code></p><h3 id="查看-window-的信息"><a href="#查看-window-的信息" class="headerlink" title="查看 window 的信息"></a>查看 window 的信息</h3><p>推荐使用 <a href="https://www.nirsoft.net/utils/winlister.html">Winlister</a> 能够查看所有开启窗口的 Title 和 Class 等信息。用于 rule 的匹配。</p><h3 id="设置命令"><a href="#设置命令" class="headerlink" title="设置命令"></a>设置命令</h3><p>GlazeWM 缺少一个更友好的官方文档说明。有许多命令并没有写在文档里，在我翻看了源码之后在这里简单整理下。</p><p><strong>设置窗口浮动</strong></p><p><em>该命令支持的参数较多，可以自由搭配。</em></p><p><code>set-floating --centered --shown-on-top --x-pos 100 --y-pos 100 --width 400 --height 400</code>  设置浮动并指定窗口的大小和位置</p><p><strong>设置窗口位置</strong></p><p><code>position --x-pos 200 --y-pos 0</code> 移动窗口到 x:200 y:0</p><p><strong>设置窗口大小</strong></p><p><code>size --width 800 --height 600</code></p><p><strong>重置窗口大小</strong></p><p><code>resize --width +2% --height -2%</code></p><p><strong>设置窗口全屏</strong></p><p><code>toggle-fullscreen</code> 开关全屏</p><p><code>set-fullscreen --maximized --shown-on-top</code> 设置全屏</p><p><strong>移动工作空间</strong></p><p><code>move-workspace --direction [left|right|up|down]</code></p><p><strong>移动窗口到工作空间</strong></p><p><code>move --workspace 1</code> 移动窗口到工作空间1</p><p><strong>改变焦点</strong></p><p><code>focus --workspace 1</code> 聚焦到工作空间1</p><p><code>focus --next-active-workspace</code> 聚焦到下一个激活的工作空间</p><p><code>focus --prev-active-workspace</code> 聚焦到上一个激活的工作空间</p><p><code>focus --prev-workspace</code> 聚焦到上一个工作空间</p><p><code>focus --next-workspace</code> 聚焦到下一个工作空间</p><p><code>focus --recent-workspace</code> 聚焦到最近的工作空间</p><p><code>focus --direction [left|right|up|down]</code> 聚焦到上下左右的工作空间</p><p><code>focus --name browser</code> 聚焦到指定名字的工作空间</p><p><code>focus --monitor-index 1</code> 聚焦到指定显示器</p><p><strong>忽略窗口</strong></p><p><code>ignore</code></p><p><strong>关闭窗口</strong></p><p><code>close</code></p><p><strong>最小化窗口</strong></p><p><code>toggle-minimized</code> 开关窗口最小化</p><p><code>set-minimized</code> 设置最小化窗口</p><p><strong>标题栏</strong></p><p><code>set-title-bar-visibility [shown|hidden]</code> 设置标题栏是否展示</p><p><strong>执行命令</strong></p><p><code>shell-exec explorer.exe</code> 打开文件管理器</p><p><strong>平铺窗口</strong></p><p><code>toggle-tiling</code> 切换窗口平铺表现</p><p><code>toggle-tiling-direction</code> 切换窗口平铺方向</p><p><code>set-tilling-direction [horizontal|vertical]</code> 设置平铺方向</p><p><strong>窗口管理器</strong></p><p><code>wm-exit</code> 退出窗口管理器</p><p><code>wm-cycle-focus</code> 切换聚焦模式 窗口 → 浮动  → 全屏</p><p><code>wm-disable-binding-mode --name resize</code>  停用绑定模式，按下 enter&#x2F;escape 回退到默认快捷键绑定</p><p><code>wm-enable-binding-mode --name resize</code> 启用绑定模式</p><p><code>wm-redraw</code> 重绘所有窗口</p><p><code>wm-reload-config</code> 重新加载配置文件</p><p><code>wm-toggle-pause</code> 开关停用窗口管理器及其所有快捷键</p><h2 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h2><p>使用功能上还是比较完善的，虽然自定义化比不上 Linux 生态，但这是 Windows 系统的限制，并不能要求仅仅通过桌面管理器来解决。整体体验也是非常类似于 Linux 上的一些知名软件如 i3 &#x2F; hyprland，能达到将近80%的效果。</p><p>另外Rust 语言开发也保证了性能。</p><p>提供的接口基本够用。例如移动窗口，更改窗口大小，设置窗口浮动等等。</p><p>软件稳定性不错，比较少遇到 bug。</p><p>项目稳定性也不错，积极更新。</p><p>如果你在 Windows 下想要尝试平铺桌面，推荐你试一试 GlazeWM。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我之前的 Web 开发工作，是可以完全在 Linux 上完成的。使用的是 Arch Linux 发行版搭配 Hyprland 平铺桌面，拥有最完善的 Wiki 和最丰富的软件源，凭借 Linux 的开放性，能够做到极致的个性化。&lt;/p&gt;
&lt;p&gt;但是由于目前需要开发鸿蒙 App，只能更换到 Windows 上使用 DevEco Studio IDE 进行开发。于我而言，最离不开的还是&lt;strong&gt;平铺桌面&lt;/strong&gt;。其次是&lt;strong&gt;命令终端&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;之前尝试过 komorebi，感觉不是很顺手，然后切换到 GlazeWM。感觉瞬间回来了！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2025/01/30/introduction-to-GlazeWM/GlazeWM-Demo.webp&quot; alt=&quot;demo&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="App" scheme="https://www.vatery.com/tags/App/"/>
    
    <category term="Windows" scheme="https://www.vatery.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>我的投资理念之转变</title>
    <link href="https://www.vatery.com/2025/01/19/investment-philosophy/"/>
    <id>https://www.vatery.com/2025/01/19/investment-philosophy/</id>
    <published>2025-01-19T14:46:34.000Z</published>
    <updated>2025-01-30T04:32:15.186Z</updated>
    
    <content type="html"><![CDATA[<p>看过一些投资圣经，也读过不少名人传记，还听了一些交易者的播客大谈经验之道。记忆最深的或者说最痛的，当然是自己在市场里的真实亏损。</p><p>结合前人大牛的理论以及个人投资的真实经验，总结出最适合自己的一套投资理念和策略，是我投资的最终目的。同时能够带来令我满意的经济回报，那是最好不过。</p><p>下面有我几点小思考。</p><p><img src="https://images.unsplash.com/photo-1518186285589-2f7649de83e0?ixid=M3w1NDQ0ODJ8MHwxfHNlYXJjaHw0fHxzdG9ja3xlbnwwfHx8fDE3MzcyOTkxMzZ8MA&ixlib=rb-4.0.3" alt="cover"></p><span id="more"></span><h2 id="分散投资还是集中投资？"><a href="#分散投资还是集中投资？" class="headerlink" title="分散投资还是集中投资？"></a>分散投资还是集中投资？</h2><p>在具体分析两者利弊之前，让我来转头讲讲性格问题。</p><p>通过30年的自我发现，自己是一个慢热的迟钝的人。性格是天生的，很难改变。因此我认为我很多职业都是不能胜任的。特别是频繁的社交、激烈的谈判、紧张的竞赛等等，我一点也不擅长。呆在那种环境下会感到非常不自在，更别说能够游刃有余地完美处理这类状况。可是现代社会是极力推崇的这方面的人才。所以很不幸，我这辈子在这条赛道上可能完全无法突破了。</p><p>庆幸的是，接触交易5年来，发现这类性格或许还蛮合适投资的。</p><p>胆小谨慎的风格自然而然的会走分散投资的线路。我早起也是这么做的，认为鸡蛋不能放在一个篮子里，需要分摊风险。我的作法是，选择十几二十只股票，看到不错的就买入几手。想到华尔街顶级的基金经理也是如此经营对冲基金，甚至有些许沾沾自喜。</p><p>直到我经历了去年的交易，本身是一个非常强劲的市场，从大盘指数的上涨点数可以看出。但是我的收益却是落后大盘不少的。直到看过《巴菲特的投资组合》之后，幡然醒悟。</p><p>复盘得出的结论：</p><ol><li>首先，我实际情况是，表现远不如大盘；</li><li>其次，如果我想要规避风险，自己也没有优秀的选股能力，不如直接买大盘；</li><li>最后，频繁小额的交易，手续费到年终结算时也是极其可怕的！</li></ol><p>所以，想要优秀的表现，一定要改变打法。<br><strong>从分散投资转向集中投资。</strong><br>从畏畏缩缩到雷厉风行。前提是，精选标的。</p><p>很多做法，在冷静思考后，通过小学的计算方法也能知道，那只是人类大脑的愚蠢选择。害怕风险，所以选择一堆风险看似较小的股，大盘跌的时候一样跌，大盘涨的时候却是微微涨。为什么？因为大盘里蓝筹股的权重更高，小微股从来只是配角。而表现优异的股票，购买的份额较小，难以改善整个持仓的表现。这种打法确实降低了风险，但是也极大限制了收益率。甚至可能最高收益率在5%以内。</p><h2 id="认真研究公司和财报"><a href="#认真研究公司和财报" class="headerlink" title="认真研究公司和财报"></a>认真研究公司和财报</h2><p>“买股票就是买公司“这句话大部分人都听过。但是很少有人听进去。</p><p>执行这一理念的最基本一步，就是先要知道你买的这个股票这家公司是做什么的，以什么为赢利点。如果连这么基础的都做不到，那和买彩票有什么区别？</p><p>了解这家公司要比身边任何人都知道的多。要了解它的竞争对手公司，它的优缺点。这是做长期投资必须的准备。本质就是理解这家公司为什么能够长期盈利，而不被宏观的经济环境波动，或者对手的激烈竞争下而淘汰下来。如果这家公司能像一艘船，不惧风浪坚定不移地朝着前进的方向航行，它的股票在长期来看没有理由不上涨。</p><p>财报就是一家公司的阶段性成绩单。迟迟不愿意交成绩单的孩子，还有使坏涂改造假成绩单的孩子，都是坏孩子。简单套用到公司上也是如此。</p><h2 id="投资交易是一场概率游戏"><a href="#投资交易是一场概率游戏" class="headerlink" title="投资交易是一场概率游戏"></a>投资交易是一场概率游戏</h2><p>我以前从未细想过这点。但是我越来越认同。</p><p>很多厌恶理财的人会说股票是赌博，他们先入为主地认为与市场博弈是 50:50 的概率，抑或自己胜的概率会更低。</p><p>市场会给你每天的动态，给你交易机会，它不会鄙视你或者谄媚你。你用什么手段从市场里赢得利润，它也不会在意。<br>从市场赚钱的概率是永远在变动的。我们应该要对自己有利的情况下再交易。</p><p>例如扑克、桥牌，厉害的玩家会计算概率，并在赢面较大的情况再下注。但是生活中的朋友们交易时，仅仅是凭借网络上极具煽动性的消息，或者是一时的个人直觉（头脑一热）便行动。相当于在完全不明胜负的情况下玩游戏，1%的胜算也在入场，无疑是送钱的行为。</p><p>我认为，作为交易者成长的过程中，有一点需要学会的就是<strong>计算概率</strong>。真实情况是，在一年之中，大部分时间是不适合交易的，也不需要交易，频繁交易反而会降低胜率。那么如何识别交易的时机，计算出一个数字！</p><h2 id="投资是一场马拉松"><a href="#投资是一场马拉松" class="headerlink" title="投资是一场马拉松"></a>投资是一场马拉松</h2><p>从身边朋友，从个人经历，都看到了转瞬即逝的高点，跌落谷底的心态崩溃。但是回过头来看，只要买的不是垃圾资产，就算今日了寒冷的熊市，但总会慢慢有所起色。所以拒绝买垃圾资产，杜绝买了垃圾资产之后卖掉然后再买入一个垃圾资产！</p><p>前期跑得快，会让我眼红羡慕。但是谁能坚持跑到最后，真的不好说。市场变幻莫测，一时的策略可能也就有效一时。下一个阶段就会变成亏钱的策略。</p><p>沉下心，认真学习研究。随股海沉浮。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;看过一些投资圣经，也读过不少名人传记，还听了一些交易者的播客大谈经验之道。记忆最深的或者说最痛的，当然是自己在市场里的真实亏损。&lt;/p&gt;
&lt;p&gt;结合前人大牛的理论以及个人投资的真实经验，总结出最适合自己的一套投资理念和策略，是我投资的最终目的。同时能够带来令我满意的经济回报，那是最好不过。&lt;/p&gt;
&lt;p&gt;下面有我几点小思考。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1518186285589-2f7649de83e0?ixid=M3w1NDQ0ODJ8MHwxfHNlYXJjaHw0fHxzdG9ja3xlbnwwfHx8fDE3MzcyOTkxMzZ8MA&amp;ixlib=rb-4.0.3&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="investment" scheme="https://www.vatery.com/tags/investment/"/>
    
  </entry>
  
  <entry>
    <title>2024年度 macOS 优秀 App</title>
    <link href="https://www.vatery.com/2025/01/14/great-apps-for-macos-in-2024/"/>
    <id>https://www.vatery.com/2025/01/14/great-apps-for-macos-in-2024/</id>
    <published>2025-01-14T13:47:14.000Z</published>
    <updated>2025-01-30T04:32:15.168Z</updated>
    
    <content type="html"><![CDATA[<p>又是一年的优秀 App 推荐，今年来的稍晚一些。<br><img src="https://images.unsplash.com/photo-1600262300671-295cb21f4d06?ixid=M3w1NDQ0ODJ8MHwxfHNlYXJjaHwyfHxtYWNib29rfGVufDB8MHx8fDE3MzY4NjI5OTN8MA&ixlib=rb-4.0.3" alt="cover"></p><span id="more"></span><h2 id="Warp"><a href="#Warp" class="headerlink" title="Warp"></a>Warp</h2><p><a href="https://wrap.dev/">https://wrap.dev</a></p><blockquote><p>一款智能的终端模拟器</p></blockquote><p><img src="/2025/01/14/great-apps-for-macos-in-2024/warp.png" alt="Untitled"></p><p><strong>推荐理由：</strong></p><p>由 Rust 提供性能方面的强力保障。智能则在自动提示、AI 问答方面展现的淋漓尽致。</p><p>多种舒适的配色，块级别的操作（搜索、复制），都是值得强烈推荐的优点。</p><p>唯一的缺点，需要注册登陆账号才能使用。</p><h2 id="Yaak"><a href="#Yaak" class="headerlink" title="Yaak"></a>Yaak</h2><p><a href="https://yaak.app/">https://yaak.app/</a></p><blockquote><p>功能类似Postman但超越Postman的网络请求工具</p></blockquote><p><img src="/2025/01/14/great-apps-for-macos-in-2024/yaak.png" alt="image.png"></p><p><strong>推荐理由：</strong></p><p>Postman 仅支持网络在线时才能使用，这种强依赖在偶尔某些时候是非常令人恶心的。而yaak数据都是在本地。</p><h2 id="Trancy"><a href="#Trancy" class="headerlink" title="Trancy"></a>Trancy</h2><p><a href="https://trancy.org/">https://trancy.org</a></p><blockquote><p>网页划词翻译和YouTube字幕翻译</p></blockquote><p><img src="/2025/01/14/great-apps-for-macos-in-2024/trancy.png" alt="Untitled"></p><p><strong>推荐理由：</strong></p><p>准确的说，他不是mac下一款软件，而是一个浏览器插件，已经上架各类浏览器的插件市场。所以是可以全平台使用。</p><p>如今翻译软件多如牛毛，且翻译API提供商也比比皆是。更因于 OpenAI 的 ChatGPT API 对外开放，制作一款翻译软件最核心的功能已经没有难度。</p><p>但是它支持自定义使用第三方AI接口，能够对 YouTube  &#x2F; Netflix 字幕翻译，优秀的交互体验，一个小工具让人爱不释手。</p><h2 id="Pearcleaner"><a href="#Pearcleaner" class="headerlink" title="Pearcleaner"></a>Pearcleaner</h2><p><a href="https://github.com/alienator88/Pearcleaner">https://github.com/alienator88/Pearcleaner</a></p><blockquote><p>免费开源的 mac 清理卸载软件</p></blockquote><p><img src="/2025/01/14/great-apps-for-macos-in-2024/pearcleaner.png" alt="image.png"></p><p><strong>推荐理由：</strong></p><p>越更新越好用，简单专业，在卸载时能够精准匹配相关的文件。一个小软件，只干好一件事。</p><h2 id="Hyperduck"><a href="#Hyperduck" class="headerlink" title="Hyperduck"></a>Hyperduck</h2><p><a href="https://sindresorhus.com/hyperduck">https://sindresorhus.com/hyperduck</a></p><blockquote><p>在你的 iPhone 或者 Vision Pro 上发送一个链接到 Mac。</p></blockquote><p><img src="/2025/01/14/great-apps-for-macos-in-2024/hyperduck.png" alt="image.png"></p><p><strong>推荐理由：</strong></p><p>你可能会觉得这或许是脱裤子放屁。那确实可能。因为有太多替代方案了。</p><ul><li>有人会说 AirDrop 就能实现！没错，那种情况是你的手机和电脑必须在附近，如果你拿着手机在外面呢？</li><li>有人会说聊天软件发送一下就能做到！没错，的确非常好用，但是你可能会忘记再次查看。</li></ul><p>Hyperduck 使用的 iCloud 同步方案，完全能够保证隐私性。即使你的 Mac 电脑不在线也没有问题。当下次打开电脑时，会立即自动打开浏览器并访问你发送过的网页。平时不会想到它的存在。这可能算得上小而美？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;又是一年的优秀 App 推荐，今年来的稍晚一些。&lt;br&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1600262300671-295cb21f4d06?ixid=M3w1NDQ0ODJ8MHwxfHNlYXJjaHwyfHxtYWNib29rfGVufDB8MHx8fDE3MzY4NjI5OTN8MA&amp;ixlib=rb-4.0.3&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="macos" scheme="https://www.vatery.com/tags/macos/"/>
    
    <category term="apps" scheme="https://www.vatery.com/tags/apps/"/>
    
  </entry>
  
  <entry>
    <title>2025年计划</title>
    <link href="https://www.vatery.com/2025/01/13/my-goals-in-2025/"/>
    <id>https://www.vatery.com/2025/01/13/my-goals-in-2025/</id>
    <published>2025-01-13T13:58:52.000Z</published>
    <updated>2025-01-30T04:32:15.168Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1506784365847-bbad939e9335?ixid=M3w1NDQ0ODJ8MHwxfHNlYXJjaHw4fHxwbGFubmVyfGVufDB8MHx8fDE3MzY3NzY4MjF8MA&ixlib=rb-4.0.3" alt="cover"></p><p>又是新的一年年度计划，我个人对这一年满怀期待。有几件重大的事件会在2025年发生。</p><p>衷心地希望自己能在2025年做的更好。</p><span id="more"></span><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><ol><li>学习鸿蒙开发 App</li><li>学习使用 Ble 低功耗蓝牙通讯及协议</li><li>学习使用 React 19 的新特性</li><li>在公司内部组织一场技术分享会</li></ol><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ol><li>学习 3 门在线课程</li><li>发布 15 篇博客</li></ol><h2 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h2><ol><li>检查甲状腺一次</li><li>洗牙一次</li><li>每周锻炼2次</li></ol><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><ol><li>小米创业思考</li><li>巴菲特的投资组合</li><li>松本行弘的程序世界</li><li>你一定爱读的极简欧洲史</li><li>新威科夫操盘法</li><li>黑天鹅：如何应对不可预知的未来</li><li>枪炮、病菌与钢铁</li><li>电影艺术：形式与风格</li><li>素食主义者</li><li>爱因斯坦传</li><li>冲向火星</li><li>达芬奇传</li><li>阿加西自传</li></ol><h2 id="投资"><a href="#投资" class="headerlink" title="投资"></a>投资</h2><ol><li>总结出自己的交易系统及经验</li><li>投资年化达到15%</li><li>每天花30分钟关注市场动态和宏观经济变化，保持敏感度</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1506784365847-bbad939e9335?ixid=M3w1NDQ0ODJ8MHwxfHNlYXJjaHw4fHxwbGFubmVyfGVufDB8MHx8fDE3MzY3NzY4MjF8MA&amp;ixlib=rb-4.0.3&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;又是新的一年年度计划，我个人对这一年满怀期待。有几件重大的事件会在2025年发生。&lt;/p&gt;
&lt;p&gt;衷心地希望自己能在2025年做的更好。&lt;/p&gt;</summary>
    
    
    
    
    <category term="plan" scheme="https://www.vatery.com/tags/plan/"/>
    
  </entry>
  
  <entry>
    <title>2024 年度总结</title>
    <link href="https://www.vatery.com/2025/01/07/summary-of-2024/"/>
    <id>https://www.vatery.com/2025/01/07/summary-of-2024/</id>
    <published>2025-01-07T15:00:25.000Z</published>
    <updated>2025-01-30T04:32:15.168Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1701170633885-7209b1bf10ee?ixid=M3w1NDQ0ODJ8MHwxfHNlYXJjaHwxNnx8MjAyNHxlbnwwfDB8fHwxNzM2MjYyNTY5fDA&ixlib=rb-4.0.3" alt="cover"></p><p>又到了一年的年末。</p><p>2024年有了一些改变和进步，但是不多。还是该回首一下历程，为明年能够更进一步。</p><span id="more"></span><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>工作内容和之前的项目类似，整体难度不大。但是也精进了一些细节，深入思考并实现了一些功能的实现方案。</p><p>在技术升级的道路上，AI 帮助了我非常之多。我为此特别开通了 Cursor Pro 以给我编程指导。我觉得自己受益于 AI 巨大，虽然非常多的人会以悲观的视角看待 AI 未来会代替美术、程序员等等行业。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ol><li><p>发布了 13 篇博客</p><p> 这其中有些是经过深度思考的，有些是浅显的小笔记。但是总体写起来没有那么痛苦，也是得益于从书本中看到的一些方法。</p></li><li><p>学习 1 门在线课程《学习如何学习》</p><p> 这是一个门非常了不起的课程。我极力推荐给所有热爱学习，但是苦于找不到方法的人。从科学的角度，从一些科学家、诺贝尔奖获得者的经验出发，让我们全面认识学习如何提升效率。</p></li><li><p>初步学习了 SwiftUI 开发 App</p><p> 花费了2年的订阅费。虽然最后也是上架了 App，但是还有很多细节没有做好。期待以后有机会能够打磨一款自己满意的小而美。</p></li></ol><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>年初时计划读不少书的，到年末没有完成目标。确实懈怠了，但也是小有收获。</p><p>下边列出我24年读的书单：</p><h3 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h3><ol><li>长安的荔枝</li><li>人生海海</li></ol><h3 id="社科"><a href="#社科" class="headerlink" title="社科"></a>社科</h3><ol><li>沸腾十五年：中国互联网1995—2009</li></ol><h3 id="金融财经"><a href="#金融财经" class="headerlink" title="金融财经"></a>金融财经</h3><ol><li>股票大作手回忆录</li><li>日本蜡烛图技术</li></ol><h3 id="家庭教育"><a href="#家庭教育" class="headerlink" title="家庭教育"></a>家庭教育</h3><ol><li>真希望我父母读过这本书</li></ol><h3 id="传记"><a href="#传记" class="headerlink" title="传记"></a>传记</h3><ol><li>穷查理宝典</li><li>别闹了，费曼先生</li><li>鞋狗</li></ol><h3 id="计算机科学"><a href="#计算机科学" class="headerlink" title="计算机科学"></a>计算机科学</h3><ol><li>计算机系统解密</li><li>JavaScript 忍者秘籍</li></ol><h3 id="成功学"><a href="#成功学" class="headerlink" title="成功学"></a>成功学</h3><ol><li>谁动了我的奶酪</li></ol><p>总共12本，着实不多。而且其中有几个小本，凑数用的。</p><p>其中看得印象比较深刻的是《人生海海》 、《鞋狗》、《股票大作手回忆录》。跌宕起伏的人生，旁人看着有如戏院看电影一般，身在其中之人则是满满的辛酸苦辣。</p><h2 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h2><p>第一次在健身房开卡了。去了几次之后不出意外地变成了很少再去。我内心其实很愿意去锻炼的，因为我深刻了解自己的肩背问题严重。无论怎样，还是在明年多逼迫自己去锻炼。</p><h2 id="娱乐影视"><a href="#娱乐影视" class="headerlink" title="娱乐影视"></a>娱乐影视</h2><ul><li>鱿鱼游戏2</li><li>黑洞频率</li><li>岳父岳母真难当</li><li>阳光小美女</li><li>荒野机器人</li><li>首尔之春</li><li>杀人回忆</li><li>雄狮少年2</li><li>异度侵入</li><li>来自深渊：烈日的黄金乡</li><li>来自深渊 S01</li><li>赛博朋克：边缘行者</li><li>从21世纪安全撤离</li><li>姥姥的外孙</li><li>还是觉得你最好</li><li>因果报应</li><li>杀戮都市：O GANTZ:O</li><li>南山的部长们</li><li>本杰明·巴顿奇事</li><li>异形：夺命舰</li><li>黑炮事件</li><li>白蛇：浮生</li><li>双子杀手</li><li>抓娃娃</li><li>商海通牒</li><li>云边有个小卖部</li><li>钢铁侠1</li><li>罗曼蒂克消亡史</li><li>头脑特工队2</li><li>走走停停</li><li>周处除三害</li><li>妙想天开</li><li>热辣滚烫</li><li>飞驰人生2</li><li>年会不能停</li><li>死期将至</li><li>伯德小姐</li><li>沙丘2</li><li>年少日记</li></ul><p>其中既有院线片，也有网络资源片。</p><p>《首尔之春》让我看到了军事政变的一角，以前只是知道有这种情况，看了如此生动的电影之后，汗毛倒立。</p><p>《杀人回忆》也是细节满满。我是听了一起有关奉俊昊的播客后去看的，真的不失所望。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有些进步，但是不够。很多细节没有做到位，导致最终结果差的很多。所以2025年希望自己在每天的任务计划上能认认真真地十足达到，这样才能完成整年的计划。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1701170633885-7209b1bf10ee?ixid=M3w1NDQ0ODJ8MHwxfHNlYXJjaHwxNnx8MjAyNHxlbnwwfDB8fHwxNzM2MjYyNTY5fDA&amp;ixlib=rb-4.0.3&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;又到了一年的年末。&lt;/p&gt;
&lt;p&gt;2024年有了一些改变和进步，但是不多。还是该回首一下历程，为明年能够更进一步。&lt;/p&gt;</summary>
    
    
    
    
    <category term="summary" scheme="https://www.vatery.com/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>读《股票大作手回忆录》有感</title>
    <link href="https://www.vatery.com/2024/11/23/learning-from-a-wall-street-poineer/"/>
    <id>https://www.vatery.com/2024/11/23/learning-from-a-wall-street-poineer/</id>
    <published>2024-11-23T02:55:59.000Z</published>
    <updated>2025-01-30T04:32:15.167Z</updated>
    
    <content type="html"><![CDATA[<p>这是一本很不错的小说型金融读物。读着很像看了一部《华尔街之狼》类似的电影，对于热爱交易的人来说，较于枯燥的交易规则和财报指数，它显得更加趣味横生。</p><p>但是结合我最近的失败交易，复盘起来别是一翻滋味。</p><p><img src="/2024/11/23/learning-from-a-wall-street-poineer/cover.jpg" alt="cover"></p><span id="more"></span><h2 id="永远不要与市场作对"><a href="#永远不要与市场作对" class="headerlink" title="永远不要与市场作对"></a>永远不要与市场作对</h2><p>这一条禁忌，我可能犯了不下 3 次。</p><p>市场永远是对的，不要试图与它叫板。</p><p>哪些行为叫作叫板呢？例如我对 Unity 的操作。</p><p>在最近上涨的趋势中，连续强势上涨了多天，我认为到了箱体顶部。按照之前的惯例，在箱体内来回震荡，难以突破。所以我决定做空！</p><p>事实证明我错了，这次 Unity 强势突破了顶部，创出近日新高！下跌有一定可能性，但是不能作为有力的理由来做空。我不能气愤并责骂它不能创新高，是我的判断错了，并且付出了代价。而且因为痴心妄想，没有在交易策略做空 3% 的亏损时及时停手买入平仓，而导致最终亏损 5% 后才为止。</p><p>正确应该如何做呢？等待信号！</p><p>观察它会突破箱体顶部还是失败，再决定后续操作。虽然这样做可能没能获取足额的利润，但是极大的降低了风险。交易应该热爱盈利，远离风险，更不能忽视风险！</p><h2 id="观察大于操作"><a href="#观察大于操作" class="headerlink" title="观察大于操作"></a>观察大于操作</h2><p>频繁的操作，会大幅度增加风险。</p><p>不够深入的观察，在交易判断上就是缺乏足够的正确性。增加交易频次，只会放大不正确性。最终导致来来回回的交易，可能盈亏差别并不大。这样只是白忙活，白白支付给交易所大量佣金，却别无收获。</p><p>观察个股和大盘是同样重要的。整体行业下行，不要奢望个股能够逆流而上；同样，行业大盘上行，但是个股却反应平平。这些情况都是怪异的，肯定有什么原因，但是上市公司不会告诉你，证券公司也不会告诉你。有时不需要知道原因，因为没有人愿意告诉你真正的原因，但是你要及时发现不对劲的地方，留下心眼。</p><p>在交易市场里，没有真正的朋友，甚至是充满了小道消息和不着边际的谎言。等你意识到问题的严重性，想要指责某一方时，他们开始互相推脱责骂。不要指望哪个公司诚实本分守规矩地告诉你财务状况、公司运营的好坏，然后等着普通股民反应完之后，大股东才开始行动。实际的案例反应在 A 股上就是大股东违规减持，这是太过明显的下跌信号。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>交易处处充满陷阱，这些陷阱来自于内心如贪婪、欲望，也来自于市场如欺诈、意外。想要攫取利润，并且落入袋中真的太难了。希望我在不断学习中，慢慢增进交易能力。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是一本很不错的小说型金融读物。读着很像看了一部《华尔街之狼》类似的电影，对于热爱交易的人来说，较于枯燥的交易规则和财报指数，它显得更加趣味横生。&lt;/p&gt;
&lt;p&gt;但是结合我最近的失败交易，复盘起来别是一翻滋味。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/11/23/learning-from-a-wall-street-poineer/cover.jpg&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="investment" scheme="https://www.vatery.com/tags/investment/"/>
    
  </entry>
  
  <entry>
    <title>学会如何学习：Learning How to Learn</title>
    <link href="https://www.vatery.com/2024/11/10/learning-how-to-learn/"/>
    <id>https://www.vatery.com/2024/11/10/learning-how-to-learn/</id>
    <published>2024-11-10T15:34:09.000Z</published>
    <updated>2025-01-30T04:32:15.167Z</updated>
    
    <content type="html"><![CDATA[<p>这是一门来自 Coursera 的课程，无意间网上冲浪时发现的。学完之后，真的是受益匪浅。</p><p>我们从小便开始学习，不仅是学校里课本的知识，在更幼小时无主观意识的牙牙学语、蹒跚学步，到毕业后社会中、工作中的人情世故、工作能力，处处充满了学习。当然，这个课程更专注于系统性、学术性、研究性的专业知识的学习方法，这恰恰是占据大部分普通人生活的学习部分。</p><p><img src="/2024/11/10/learning-how-to-learn/cover.webp" alt="cover"></p><span id="more"></span><p>下面是我学完之后的总结。<br>不过最直接的方式是亲自观看一遍课程：<a href="https://www.coursera.org/learn/learning-how-to-learn/">https://www.coursera.org/learn/learning-how-to-learn/</a></p><h2 id="思维类型"><a href="#思维类型" class="headerlink" title="思维类型"></a>思维类型</h2><p>我们从小接受的教育中，推崇的是聚合思维，聚精会神、心无旁骛地处理一件事。往往忽略了发散型思维，没人告诉过我发散型思维在学习中也能发挥至关重要的作用。<br>课程中表明在学习中发散型思维更适合。历史上有非常多的科学家、艺术家会在将睡未睡朦胧不清之时，寻找灵感，惊醒后集中注意力朝着这个方向钻研。发散型思维能够让大脑足够灵活。</p><h2 id="记忆训练"><a href="#记忆训练" class="headerlink" title="记忆训练"></a>记忆训练</h2><p>大家都会记得成长过程中几个学习成绩优异且记忆里特别好的同学，觉得他们具有天生的好记忆力。</p><p>充分的研究表明，具有天赋性记忆力的人是极少见的，值得高兴的是，记忆力是完全可以通过训练来增强的。像锻炼肌肉一样来训练记忆力，唯一一点需要注意的是，像锻炼身体一样，它需要有效的方法。</p><p>记忆力分为短期记忆和长期记忆。长期记忆需要一定的重复才能形成，而且如何重复是有技巧的。需要间隔重复，在几天之内不断重复，间隔几天再重复。如果在一天内大量的重复，反而效果不佳。艾宾浩斯遗忘曲线则是运用的最佳典范。</p><p>另一个卓越有效的方法，转化为图像越能记忆深刻。比如很多记忆力强者所说的大脑中的记忆宫殿，它有可能真实存在吗？是的。将一个非常熟悉的地方想象为自己的记忆宫殿，把一些记忆点作为物品放入，多次之后有非常明显的记忆提升。</p><p>通过记忆已经理解的材料，可以彻底消化材料。</p><h2 id="什么是学习的上下文"><a href="#什么是学习的上下文" class="headerlink" title="什么是学习的上下文"></a>什么是学习的上下文</h2><p>上下文是知道何时使用该技能，需要不断的练习才能强化。在何样的时机、地点使用相应的技能。<br>某件事如果只是在看，就算理解了如何去做，也不代表能真正做到。<br>只有在自己实际操作和完全掌握的情况下才能建立起神经模型。</p><p>例如写作需要和编辑分开。<br>写作时需要发散思维，随意随性，而不考虑其正确性、合理性；<br>编辑时则需要专注思维，注意拼写、遣词造句等方面。</p><h2 id="过度学习是否有用？"><a href="#过度学习是否有用？" class="headerlink" title="过度学习是否有用？"></a>过度学习是否有用？</h2><p>过度学习是有用的，但是小心，可能会让你认为你已经掌握了全部知识，但实际只是掌握了简单的部分。</p><p>所以应该均衡学习，把精力专注于困难部分的学习。被称为 “刻意训练”。<br>每次进行练习或者从自己大脑中检索信息时，就会加强学习过程和理解以及记忆。</p><p>性格激进的或者经常持有不同观点的人往往具有更大的创造力！<br>或许就是不墨守成规的一种表现，挑战现状，质疑模型，不人云亦云。</p><p><strong>检索学习</strong><br>既可以增强记忆，也可以显著提高概念理解。<br>Flashcard “抽认卡”是一种有效方法。</p><p>回顾知识时，并非机械式地复述，而是在通过回顾过程中加深理解，方便串联起前后知识。</p><h2 id="已经有人解决这个问题了，我还需要花费努力去攻克吗？"><a href="#已经有人解决这个问题了，我还需要花费努力去攻克吗？" class="headerlink" title="已经有人解决这个问题了，我还需要花费努力去攻克吗？"></a>已经有人解决这个问题了，我还需要花费努力去攻克吗？</h2><p>需要的！</p><p>这是因为，只有自己努力了，才锻炼了大脑，让大脑针对此类问题时，能够自己解决。<br>第二个方面，如果在解决难题的过程中，产生了一些想法并对自己有价值，那么这就满足了创造力的条件。</p><h2 id="休息放松的重要性"><a href="#休息放松的重要性" class="headerlink" title="休息放松的重要性"></a>休息放松的重要性</h2><p>通过观看好多个教授的分享。他们都提及在研究中遇到难题时，会主动地选择休息。不论是跑步、骑行、攀岩还是简单地陪伴在家人身边，都会让大脑和身体获得良好的休息。常常在休息中会获得灵感。教授们都认为，虽然看起来身体是在休息放松，但是大脑仍在活动，只是把一些计算放在了后台去运行。而且在这种情况下，大脑运行地可能更有效率。</p><h2 id="睡眠的重要性"><a href="#睡眠的重要性" class="headerlink" title="睡眠的重要性"></a>睡眠的重要性</h2><p>长期睡眠不足在生理上很有可能导致抑郁症、心脏疾病、糖尿病等等，最明显的就是头疼。本身睡眠是能够让大脑细胞进行休息，排除有害物质等功效，所以有良好的睡眠对记忆影响十分巨大。</p><h2 id="对抗拖延症"><a href="#对抗拖延症" class="headerlink" title="对抗拖延症"></a>对抗拖延症</h2><p>拖延和上瘾有非常多的相似之处，会让你短暂的逃避并获得快感，但是并不能真正解决问题。而且随着时间变长，一切都会越来越糟糕。</p><p>对抗拖延症的有效好方法是，用习惯来达到目的。习惯对大脑来说，是一种非常节能的状态。能在无意识或者非常少精力消耗的情况下，关注在最重要的部分。</p><p>习惯，有好的也有坏的。</p><p>关注在过程，而不是结果上。而专注于过程最直接的方法就是在一个<strong>番茄时钟的 25 分钟内集中注意力</strong>。<br>将你的工作划分成一系列小任务，这样可以降低难度，同时给予许多奖励。有意识地将奖励放到任务完成之后。</p><h2 id="测验"><a href="#测验" class="headerlink" title="测验"></a>测验</h2><p>小测验也是十分重要的，在与同样时间段的学习比较，通过测验会比常规学习学到并记住更多。</p><p>因为测验时，<strong>注意力会非常集中</strong>。</p><p>在测验中也有一些方法可以使用。通常推荐的方法是，<strong>先易后难</strong>，这样会让你更有信心。<br>但是课程中却给出另一种思路，<strong>先难后易</strong>，如果遇到难以解决，立马跳过，去做简单的题目。这背后的原理是，在思考了难题之后，会在脑中留下深刻的印象，然后发散模式开始运作。在解决别的简单问题时，大脑仍旧在后台处理难题的解法，或许回过头来再看待难题时，思路会变得更清晰。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过课程，让我学习了好多以前从没见识过的学习方法。在之后的时间运用了几个之后，的的确确有所见效。我深刻地意识到，学习真的有方法的。</p><p>或许有些人悟性很好，很早就自己总结出了适合自己的学习方法；也或许有些同学的家长为他们指导了非常好的学习之路。像我这样的普通人，如果早些掌握这些学习方法，可能没有巨大改变，但在万人过独木桥的高考中夺得十几分，人生也有可能会有所偏差。</p><p>感谢 《Learning how to Learn》的作者 Barbara Oakley 以及参与制作的嘉宾们，感谢把它作为一门免费的课程呈现在 Coursera。衷心希望它能被更多爱学习的朋友们看到！</p><p>最后再次放送下课程链接：<a href="https://www.coursera.org/learn/learning-how-to-learn/">https://www.coursera.org/learn/learning-how-to-learn/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是一门来自 Coursera 的课程，无意间网上冲浪时发现的。学完之后，真的是受益匪浅。&lt;/p&gt;
&lt;p&gt;我们从小便开始学习，不仅是学校里课本的知识，在更幼小时无主观意识的牙牙学语、蹒跚学步，到毕业后社会中、工作中的人情世故、工作能力，处处充满了学习。当然，这个课程更专注于系统性、学术性、研究性的专业知识的学习方法，这恰恰是占据大部分普通人生活的学习部分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/11/10/learning-how-to-learn/cover.webp&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Learning" scheme="https://www.vatery.com/tags/Learning/"/>
    
  </entry>
  
  <entry>
    <title>Docker Buildx 是什么？</title>
    <link href="https://www.vatery.com/2024/10/22/what-is-docker-buildx/"/>
    <id>https://www.vatery.com/2024/10/22/what-is-docker-buildx/</id>
    <published>2024-10-22T05:34:45.000Z</published>
    <updated>2025-01-30T04:32:15.166Z</updated>
    
    <content type="html"><![CDATA[<p>有时网络冲浪看到文章说 docker build 传统方式在不久的将来会被废弃时，我感到莫名其妙。不过官方同时建议更换 docker buildx 来替代。此时我与你一样有疑惑。</p><p>Docker Buildx 首次出现在 19.03 版本中，于 2019 年 7 月发布。距离今日已经过去5年，我现在才感觉到它的存在。但平常可能不经意间已经受益于它的一些特性。</p><p><img src="/2024/10/22/what-is-docker-buildx/cover.webp" alt="cover"></p><span id="more"></span><h2 id="Docker-Build-不好吗？"><a href="#Docker-Build-不好吗？" class="headerlink" title="Docker Build 不好吗？"></a>Docker Build 不好吗？</h2><p>在过去的开发环境中，当然是足够好的。但原因是来自于人性的贪婪。没错，我们想要更多更好的特性。很不幸，原来的架构不支持，只好放弃。</p><h2 id="Docker-Buildx-带来了什么？"><a href="#Docker-Buildx-带来了什么？" class="headerlink" title="Docker Buildx 带来了什么？"></a>Docker Buildx 带来了什么？</h2><p>能实现更复杂更现代化开发需求的功能：</p><ol><li><strong>生成多平台编译</strong>：可以在一次打包编译命令输出 arm&#x2F;x86 等多平台的镜像</li><li><strong>增强缓存：</strong>自动跳过未使用的构建阶段，优化使用修改文件的上下文</li><li><strong>并行构建：</strong>并行构建独立的阶段，加快编译速度</li><li><strong>支持更高级的 Dockerfile 语法</strong></li><li>…</li></ol><h2 id="如何使用-Docker-Buildx"><a href="#如何使用-Docker-Buildx" class="headerlink" title="如何使用 Docker Buildx"></a>如何使用 Docker Buildx</h2><p>Docker Desktop、Docker Engine 大于 23.0 版本已经默认启用。</p><p>Docker Buildx 是交互客户端，而背后是全新的 BuildKit 提供了实际编译构建的服务进程。在你执行 <code>docker build</code> 时已经在使用 Buildx。Buildx 会解析用户传入的命令参数，并发送给后端 BuildKit 执行。（所以从另一个角度讲，BuildKit 才是核心功能的实现方。不使用 Buildx 也可以，选用其他支持的客户端同样能运用 BuildKit 的新特性。）</p><h3 id="如何验证你是否安装了-BuildKit"><a href="#如何验证你是否安装了-BuildKit" class="headerlink" title="如何验证你是否安装了 BuildKit"></a>如何验证你是否安装了 BuildKit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx version</span><br></pre></td></tr></table></figure><h3 id="如何手动启用"><a href="#如何手动启用" class="headerlink" title="如何手动启用"></a>如何手动启用</h3><p>在 Docker Engine 23.0 之前的需要手动开启该功能</p><ol><li><p>使用环境变量</p><p> <code>DOCKER_BUILDKIT=1 docker build .</code> </p></li><li><p>编辑 Docker daemon 配置文件</p><p> 配置文件路径在：<code>/etc/docker/daemon.json</code></p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;features&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;buildkit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p> 最后重启 Docker</p><p> <code>sudo systemctl restart docker</code></p></li></ol><h2 id="重要特性一探"><a href="#重要特性一探" class="headerlink" title="重要特性一探"></a>重要特性一探</h2><h3 id="生成多平台镜像"><a href="#生成多平台镜像" class="headerlink" title="生成多平台镜像"></a>生成多平台镜像</h3><p>使用 <code>--platform</code> 参数来生成目标镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx build --platform linux/amd64,linux/arm64</span><br></pre></td></tr></table></figure><h3 id="并行构建"><a href="#并行构建" class="headerlink" title="并行构建"></a>并行构建</h3><p>传统的 build 会顺序依次执行构建命令，这样花费的时间非常长，没有优化方案。但是 BuildKit 则会分析相关性和依赖性。如果不同的 stage 阶段没有相互依赖，则会同时构建。大大缩短构建时间。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:bionic as base-builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> GOPATH=$HOME/go</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:/usr/local/go/bin:$GOPATH/bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install -y curl git build-essential</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> base-builder as base-builder-extended</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -sL https://deb.nodesource.com/setup_14.x | bash - \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install -y nodejs \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; npm install -g yarn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> base-builder as golang</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -O https://storage.googleapis.com/golang/go1.15.2.linux-amd64.tar.gz \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; tar -xvf go1.15.2.linux-amd64.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> base-builder as source-code</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> git <span class="built_in">clone</span> https://github.com/prometheus/prometheus.git prometheus/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> base-builder-extended as builder</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=golang go /usr/local</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=source-code prometheus/ prometheus/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> prometheus/ &amp;&amp; make build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:bionic as final</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder prometheus/prometheus prometheus</span></span><br><span class="line"><span class="comment"># RUN ./prometheus --config.file=your_config.yml</span></span><br></pre></td></tr></table></figure><p>可以看到 <code>base-builder-extended</code> 和 <code>golang</code> 以及 <code>source-code</code> 是相互没有依赖的 stage，所以构建时会同时执行。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Docker 已经大大改变了现代软件工程的开发构建方式，对运维部署则是完全革命性的工具。随着网络世界的进一步发展，Docker 也在跟进，从而变得更现代化能够适应各类状况。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有时网络冲浪看到文章说 docker build 传统方式在不久的将来会被废弃时，我感到莫名其妙。不过官方同时建议更换 docker buildx 来替代。此时我与你一样有疑惑。&lt;/p&gt;
&lt;p&gt;Docker Buildx 首次出现在 19.03 版本中，于 2019 年 7 月发布。距离今日已经过去5年，我现在才感觉到它的存在。但平常可能不经意间已经受益于它的一些特性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/10/22/what-is-docker-buildx/cover.webp&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="docker" scheme="https://www.vatery.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Web Extension 之初窥</title>
    <link href="https://www.vatery.com/2024/10/21/chrome-web-extensions-quick-start/"/>
    <id>https://www.vatery.com/2024/10/21/chrome-web-extensions-quick-start/</id>
    <published>2024-10-21T09:26:21.000Z</published>
    <updated>2025-01-30T04:32:15.166Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2024/10/21/chrome-web-extensions-quick-start/cover.webp" alt="cover"></p><p>原来开发 Chrome Web Extension 也没有想象中那么难。</p><span id="more"></span><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h3><p>与 Web 页面非常相似，根据 Chrome 提供的额外 API 可以控制浏览器的一些功能。</p><p>需要理解的关键概念有3个：</p><ul><li><strong>Popup UI:</strong> 当点击扩展按钮时展示的界面</li><li><strong>Content Script：</strong>注入网页，可以和 DOM 元素交互</li><li><strong>Background Script：</strong>在后台运行，处理事件和数据</li></ul><h3 id="Manifest"><a href="#Manifest" class="headerlink" title="Manifest"></a>Manifest</h3><p>这是扩展项目的配置文件，类似于 <code>package.json</code>。浏览器会读取该配置，处理开发者信息、权限管理、版本号等。</p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>最终要打包成一个 Web 扩展需要特别的工具支持。例如 <strong><a href="https://crxjs.dev/">CRXJS</a></strong> 是一个 Vite 的库，支持 React&#x2F;Vue&#x2F;Solid&#x2F;Vanilla JavaScript 多种框架。你也可以自由选择其他适合的。</p><h2 id="上架"><a href="#上架" class="headerlink" title="上架"></a>上架</h2><p>上架Google Chrome Web Store 需要注册开发者账号。</p><p>注册账号需要支付5美元认证费用。</p><p>这里有需要注意的点：</p><ol><li>国内银联 VISA 双币卡不支持</li><li>国外卡，选择账户注册地址时不能选择中国大陆，香港和台湾地区是可以的</li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>上架前处理好数据的问题，准备好隐私协议&#x2F;用户协议。</li><li>使用 React&#x2F;Vue 等主流框架都可以开发，使用 TypeScript 也没问题。</li><li>注入网页的元素，特别注意好隔离。使用 ShadownDOM 技术防止和原网页的样式相互影响。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2024/10/21/chrome-web-extensions-quick-start/cover.webp&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;原来开发 Chrome Web Extension 也没有想象中那么难。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Web Extension" scheme="https://www.vatery.com/tags/Web-Extension/"/>
    
    <category term="Develop" scheme="https://www.vatery.com/tags/Develop/"/>
    
  </entry>
  
  <entry>
    <title>我的 Arch Linux 基本配置</title>
    <link href="https://www.vatery.com/2024/09/24/my-arch-linux-setup/"/>
    <id>https://www.vatery.com/2024/09/24/my-arch-linux-setup/</id>
    <published>2024-09-24T14:03:17.000Z</published>
    <updated>2025-01-30T04:32:15.148Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2024/09/24/my-arch-linux-setup/cover.webp"><br>所有用过 Arch Linux 的人，都会成为它的信徒。</p><span id="more"></span><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a><strong>基本信息</strong></h2><ul><li>系统 OS：Arch Linux</li><li>桌面环境 Desktop Manager：Hyprland</li></ul><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a><strong>软件</strong></h2><ul><li>终端 Terminal：Alacritty &#x2F; Wezterm</li><li>Shell: zsh</li><li>字体 Fonts: FireCode</li><li>输入法 Input Method：fcitx Rime</li><li>浏览器 Browser：Brave &#x2F; Zen Browser</li><li>文件管理器 File Manager：Joshuto</li><li>文本编辑器 Text Editor：Neovim</li><li>启动器 Launcher：Rofi</li><li>状态栏 Status Bar：Waybar</li></ul><h2 id="桌面环境"><a href="#桌面环境" class="headerlink" title="桌面环境"></a>桌面环境</h2><h3 id="平铺桌面-Hyprland"><a href="#平铺桌面-Hyprland" class="headerlink" title="平铺桌面 Hyprland"></a>平铺桌面 Hyprland</h3><p>非常优雅的平铺桌面，丝滑的动画一下吸引了我，马上从 i3 转换过来。这里不得不吹捧下平铺桌面。我第一次在视频中看到这种交互方式，瞬间迷上了。能够最高效率的使用桌面空间，也能够切换不同工作空间(Workspace)。这一切都是通过键盘快捷键操作，没有多余的鼠标动作。</p><p><img src="/2024/09/24/my-arch-linux-setup/arch-linux.webp" alt="2024-09-24_13-26-48.webp"></p><h3 id="启动器-Rofi"><a href="#启动器-Rofi" class="headerlink" title="启动器 Rofi"></a>启动器 Rofi</h3><p>一个勉强够用的应用启动器，和 macOS 上的 Alfred &#x2F; Raycast 相比差远了，离 Windows 上的 Power Toys 也是有一段距离。有些使用 Gnome 等桌面的也可以尝试下 Electron 开发的 uTools，这款是比较完善的国人开发的启动器。但是在 Hyprland 上有一些问题，所以我就没有使用。</p><p>Rofi 默认的主题比较粗糙，起初我也参考一些其他人的案例进行手动修改，但是最终在开源仓库里选择了一款，更省心和完善。<a href="https://github.com/newmanls/rofi-themes-collection">https://github.com/newmanls/rofi-themes-collection</a></p><p><img src="/2024/09/24/my-arch-linux-setup/rofi.webp" alt="image.webp"></p><h3 id="浏览器-Zen-Browser"><a href="#浏览器-Zen-Browser" class="headerlink" title="浏览器 Zen Browser"></a>浏览器 Zen Browser</h3><p>我在 Linux 桌面环境里使用过非常多种类的浏览器，不是因为我闲得蛋疼，只是因为 Wayland 的兼容问题。实际内心想哭。特别针对 Chromium 系列浏览器，fcitx 输入法的问题困扰已久。</p><p>原生的 Chrome 和 Chromium 及衍生版需要添加下列参数才能有正确的缩放比例，但是输入法有时仍会出错，要么无法输入中文，要么候选框偏移超级离谱。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--enable-features=UseOzonePlatform --ozone-platform=wayland --enable-wayland-ime</span><br></pre></td></tr></table></figure><p>但是 Firefox 系列浏览器没有这个问题，对 Linux 环境非常友好，缺点是运行速度偏慢。Firefox 衍生的浏览器有很多，基本主打的都是开源、隐私，例如：Firefox &#x2F; Waterfox &#x2F; LibreWolf &#x2F; Floorp &#x2F; Zen Browser…，我都尝试过，有的平平无奇，有的甚至BUG百出。最后选择了 Zen Browser，功能比较稳定，侧边栏和分栏展示也是我中意的点。</p><p><img src="/2024/09/24/my-arch-linux-setup/zen-browser.webp" alt="image.webp"></p><h3 id="动态墙纸-mpvpaper"><a href="#动态墙纸-mpvpaper" class="headerlink" title="动态墙纸 mpvpaper"></a>动态墙纸 mpvpaper</h3><p>核心功能来自于 mpv，且支持 mpv 透传参数，例如全屏、随机播放、循环播放等。我从网络上下载了一些 city walk 的视频作为背景，配合透明的 Neovim 编程沉浸其中。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a><strong>开发环境</strong></h2><p>我是一个 Web 全栈开发者，主要以 JavaScript &#x2F; TypeScript &#x2F; NodeJS 为主，偶尔也会使用 Go &#x2F; Python 写一些小脚本。</p><h3 id="编辑器-Neovim"><a href="#编辑器-Neovim" class="headerlink" title="编辑器 Neovim"></a><strong>编辑器 Neovim</strong></h3><p>这是一个比较小众的选择，我从 Sublime Text → Atom → VSCode → Noevim 一路走来，只能说你想好好编写代码，千万不要碰 Vim &#x2F; Emacs 之类的东西。搭配 Lazy.nvim 管理插件，打造到我现在用的顺手模样，没法说具体花多久时间，只能说一直在优化修改配置和挑选新的插件，不停地折腾。</p><p>现在也开始使用 <strong>cursor</strong> AI 编辑器，购买了 Pro 版本。AI 编程助手真的太香了。</p><p>我个人的详细 neovim dotfile 可以移步此处：<a href="https://github.com/y-not-u/dotfiles/tree/main/.config/nvim">https://github.com/y-not-u/dotfiles/tree/main/.config/nvim</a></p><h3 id="NodeJS-版本管理器-Volta"><a href="#NodeJS-版本管理器-Volta" class="headerlink" title="NodeJS 版本管理器 Volta"></a><strong>NodeJS 版本管理器 Volta</strong></h3><p>这是一个 Rust 语言编写的新兴 JavaScript 工具库管理工具，我已经用它替代掉了 NVM。</p><h3 id="JS-运行时-Bun"><a href="#JS-运行时-Bun" class="headerlink" title="JS 运行时 Bun"></a><strong>JS 运行时 Bun</strong></h3><p>这是一个 Zig 语言编写的新兴 JavaScript 运行时，现在已经发布 1.0 正式版本，功能也日趋稳定。我在开发环境经常使用它。</p><h3 id="JavaScript-包管理器-Pnpm"><a href="#JavaScript-包管理器-Pnpm" class="headerlink" title="JavaScript 包管理器 Pnpm"></a>JavaScript 包管理器 Pnpm</h3><p>从原先 npm 和 yarn 两分天下的局面下，pnpm 横空出世并牢牢占据一席之位。当下许多知名项目也优先选择使用 pnpm。目前 pnpm 最新版本是 9.11.0，更新非常频繁。</p><h3 id="Session-管理-Zellij"><a href="#Session-管理-Zellij" class="headerlink" title="Session 管理 Zellij"></a>Session 管理 Zellij</h3><p>tmux 无疑是优秀且悠久的终端 sesssion 管理器，但是其操作非常考验使用者的熟练度。</p><p>而新秀 Zellij 则是更多考虑了交互，提供指令提示。对新手非常友好。</p><p>当然同时提供了相当强悍的自定义性，包括键位、布局等等。可谓老少咸宜。</p><p><img src="/2024/09/24/my-arch-linux-setup/zellij.webp" alt="image.webp"></p><h3 id="Git-版本控制-Lazygit"><a href="#Git-版本控制-Lazygit" class="headerlink" title="Git 版本控制 Lazygit"></a>Git 版本控制 Lazygit</h3><p>第一次用过 Lazygit 后再也不乐意徒手敲命令了🤣。</p><p><img src="/2024/09/24/my-arch-linux-setup/lazygit.webp" alt="image.webp"></p><p>最后，几年用 Linux 作为工作的操作系统，聊一点感受。<br>Linux 的最大优点便是，极大的自由度。可以让使用者自己选择喜爱的各类工具，甚至动手能力强的可以制造出最符合个人习惯的工具。最大的缺点则是，有时缺乏一些优质交互的软件，还有软件的不稳定性（内核还是非常稳定的，桌面就说不定了🐶）。丰富的开源项目、活跃的社区是其特色。衷心希望 Linux 生态生生不息。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2024/09/24/my-arch-linux-setup/cover.webp&quot;&gt;&lt;br&gt;所有用过 Arch Linux 的人，都会成为它的信徒。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://www.vatery.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>我的阿里云服务器部署些什么</title>
    <link href="https://www.vatery.com/2024/09/19/what-services-are-deployed-on-my-aliyun-server/"/>
    <id>https://www.vatery.com/2024/09/19/what-services-are-deployed-on-my-aliyun-server/</id>
    <published>2024-09-19T13:19:57.000Z</published>
    <updated>2025-01-30T04:32:15.148Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个开发者，势必需要一台个人、且能公网访问的服务器。那么它能用来干什么呢？让我来带你看看我是如何玩转它的。<br><img src="https://cdn.sa.net/2024/09/19/zWkBTKbGoJgPurt.png" alt="cloud server"></p><span id="more"></span><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>个人工作电脑使用的是 Arch Linux，但对于纯服务器来说，没必要追求非常新的特性，而是要求相对的稳定。又因为是个人服务器，有时会装一些较新的应用或者体验一些的功能，所以综合考虑使用 Ubuntu 22.04 LTS。Ubuntu 具备巨大的用户群体和丰富的网络资料，是非常适合个人学习或日常使用的。</p><h2 id="必要准备"><a href="#必要准备" class="headerlink" title="必要准备"></a>必要准备</h2><ol><li>首先创建一个普通用户，拒绝使用默认的 <code>root</code> 用户，避免权限、安全问题带来麻烦。</li><li>本地机器创建密钥对，使用 ssh 钥匙串加密登录，而不是直接使用密码。</li><li>服务器上操作首先开启 <code>tmux</code> ，防止操作窗口卡住丢失。</li><li>之后就是愉快地玩耍 😉 。</li></ol><h2 id="基础软件"><a href="#基础软件" class="headerlink" title="基础软件"></a>基础软件</h2><p>首先我会装一些必须的基础应用，帮助我更好管理、监控服务器。</p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p><img src="https://cdn.sa.net/2024/09/19/PF8gOuozksxavMc.png" alt="image.png"></p><p>这是必须的，现在非常多的应用都能支持容器化。带来快捷的部署体验。包括不需要再安装一系列的依赖污染服务器的环境。我也经常使用 <strong>docker compose</strong> 来部署服务，可以很好的管理配置参数。</p><h3 id="btop"><a href="#btop" class="headerlink" title="btop"></a>btop</h3><p><img src="https://cdn.sa.net/2024/09/19/CGBsSQyRMun3lg8.png" alt="image.png"></p><p><code>htop</code> 的替代品。在这两个基本的设备检测软件之间选择一个即可。</p><h3 id="ncdu"><a href="#ncdu" class="headerlink" title="ncdu"></a>ncdu</h3><p><img src="https://cdn.sa.net/2024/09/19/1OqlLMBxQNRb3Tp.png" alt="image.png"></p><p><code>du</code> 的替代品。查看磁盘使用状态非常方便。</p><h2 id="常规应用"><a href="#常规应用" class="headerlink" title="常规应用"></a>常规应用</h2><h3 id="Zerotier-one"><a href="#Zerotier-one" class="headerlink" title="Zerotier-one"></a>Zerotier-one</h3><p><img src="https://cdn.sa.net/2024/09/19/9wlcFM8qhtNpv1B.png" alt="image.png"></p><p>组建私有网络，让多台电脑及服务器可以异地组网。这样不需要通过暴露外网端口即可进行互联互通，大大增加安全性，以及减少网络嵌套层级带来的麻烦。缺点是，由于需要打洞等技术，在可以直连情况下通信良好，在不能直连情况下走 Zerotier 的服务器会有巨大的延迟表现。目前通过搭建一个 moon 节点暂时缓解。</p><h3 id="Cloudflare-Tunnel"><a href="#Cloudflare-Tunnel" class="headerlink" title="Cloudflare Tunnel"></a>Cloudflare Tunnel</h3><p><img src="https://cdn.sa.net/2024/09/19/MsfmnZpXUx6wh4C.png" alt="image.png"></p><p>使用 <code>Zero Trust</code> 零信任技术，能够将机器内部的服务端口暴露出来，这样不需要配置 nginx 反代，或者备案（特殊需要）就可以通过域名访问。唯一代价，速度有点慢。其余都是优点：免费、匿名、CDN。</p><h3 id="Uptime-Kuma"><a href="#Uptime-Kuma" class="headerlink" title="Uptime Kuma"></a>Uptime Kuma</h3><p><img src="https://cdn.sa.net/2024/09/19/vYBFUZAsc1HCkxI.png" alt="image.png"></p><p>网络监控、报警平台。界面舒适，功能适中，交互良好。这是一款个人使用非常方便的监控软件，可以通过 docker 部署，http&#x2F;tcp&#x2F;ping 等各类网络测试连通性，还支持数十种通知系统的接入。像我就接入了 iOS Bark App 来收取通知。</p><h3 id="Homarr"><a href="#Homarr" class="headerlink" title="Homarr"></a>Homarr</h3><p><img src="https://cdn.sa.net/2024/09/19/Ss6MZB9XYhjOxqF.png" alt="image.png"></p><p>用来导航的一个小网页。将自己部署的服务添加上去，作为一个面板墙或者设置为浏览器的默认导航页面，方便访问。同样支持 docker 部署。</p><h3 id="AList"><a href="#AList" class="headerlink" title="AList"></a>AList</h3><p><img src="https://cdn.sa.net/2024/09/19/U9y61eBPHhV7aQl.png" alt="image.png"></p><p>能够接入数十种网盘，并提供 webdav 服务的工具。由 Go 语言开发，性能不错。作者更新频繁，生态已经比较丰富，聚集了众多用户。我挂载了网盘之后，通过 <code>duplicati-cli</code> 备份加密数据到 webdav 后，就相当于有了一个数据备份网盘。另外也可以保存一些影视资料，使用第三方的播放器，如 Infuse&#x2F;VidHub&#x2F;Fileball 等挂载展示海报墙和播放，能够获得比较好的体验。</p><p>其余的工作开发所需例如数据库等等就不在此列举了，各人尽不相同。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;作为一个开发者，势必需要一台个人、且能公网访问的服务器。那么它能用来干什么呢？让我来带你看看我是如何玩转它的。&lt;br&gt;&lt;img src=&quot;https://cdn.sa.net/2024/09/19/zWkBTKbGoJgPurt.png&quot; alt=&quot;cloud server&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://www.vatery.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Keychron 系列在 Linux 上连接 VIA 网站设置改键</title>
    <link href="https://www.vatery.com/2024/08/09/set-keychron-keymap-on-linux/"/>
    <id>https://www.vatery.com/2024/08/09/set-keychron-keymap-on-linux/</id>
    <published>2024-08-09T14:38:31.000Z</published>
    <updated>2025-01-30T04:32:15.148Z</updated>
    
    <content type="html"><![CDATA[<p>keychron 支持 <a href="https://usevia.app/">https://usevia.app</a> 和官网 <a href="https://launcher.keychron.com/">https://launcher.keychron.com</a> 进行配置。两者稍有不同。<br>下面特别讲讲在 Linux 的环境下如何进行配置。<br>我的系统环境是 Arch Linux，键盘是 Keychron Q60 Max。<br><img src="https://cdn.sa.net/2024/08/09/i1eHWhnoqcmAJF2.png" alt="keychron-Q60-Max"></p><span id="more"></span><blockquote><p>keychron 说明要进行改键需要使用有线连接，并使用 Chrome 内核的浏览器访问上面的网站。</p></blockquote><h2 id="连接-Chrome"><a href="#连接-Chrome" class="headerlink" title="连接 Chrome"></a>连接 Chrome</h2><p>一般在 macOS 和 Windows 主流系统上会比较顺畅。但在 Linux 上第一次使用的时候，非常可能遇到 <code>HID device connected</code> 的报错 ，看着意思是成功，实际却没有连接成功的情况。</p><p>在 Chrome 上可以通过访问 <a href="chrome://device-log/">chrome:&#x2F;&#x2F;device-log&#x2F;</a>  查看日志。<br>发现显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[17:41:40] Failed to open &#x27;/dev/hidraw1&#x27;: FILE_ERROR_ACCESS_DENIED</span><br><span class="line"></span><br><span class="line">[17:41:40] Access denied opening device read-write, trying read-only.</span><br></pre></td></tr></table></figure><p>此时需要给予必要的权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> a+rw /dev/hidraw1</span><br></pre></td></tr></table></figure><p>刷新网页即可连接成功。</p><h2 id="网站-VIA-配置"><a href="#网站-VIA-配置" class="headerlink" title="网站 VIA 配置"></a>网站 VIA 配置</h2><p>keychron 官网连接后可以直接操作改键，但是 VIA 官网则需要导入 JSON 配置文件才能识别。下面简单讲下 <code>usevia.app</code> 上如何导入 JSON 键位配置文件。</p><ol><li><p>进入 keychron 的配置文件和固件网站 <a href="https://www.keychron.com/pages/firmware-and-json-files-of-the-keychron-qmk-keyboards">https://www.keychron.com/pages/firmware-and-json-files-of-the-keychron-qmk-keyboards</a>  找到相应型号进行下载</p></li><li><p>在 usevia.app 上“设置”页面内打开 “Show Design Tab” 开关</p></li><li><p>切换到出现的 “Design” 页面，点击上传刚刚下载的 JSON 文件</p></li><li><p>然后在首页连接后展示的是相应型号的布局和额外的自定义键值</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;keychron 支持 &lt;a href=&quot;https://usevia.app/&quot;&gt;https://usevia.app&lt;/a&gt; 和官网 &lt;a href=&quot;https://launcher.keychron.com/&quot;&gt;https://launcher.keychron.com&lt;/a&gt; 进行配置。两者稍有不同。&lt;br&gt;下面特别讲讲在 Linux 的环境下如何进行配置。&lt;br&gt;我的系统环境是 Arch Linux，键盘是 Keychron Q60 Max。&lt;br&gt;&lt;img src=&quot;https://cdn.sa.net/2024/08/09/i1eHWhnoqcmAJF2.png&quot; alt=&quot;keychron-Q60-Max&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://www.vatery.com/tags/Linux/"/>
    
    <category term="Keychron" scheme="https://www.vatery.com/tags/Keychron/"/>
    
    <category term="Keyboard" scheme="https://www.vatery.com/tags/Keyboard/"/>
    
  </entry>
  
  <entry>
    <title>2024年度Linux优秀CLI推荐</title>
    <link href="https://www.vatery.com/2024/08/06/great-CLI-in-2024/"/>
    <id>https://www.vatery.com/2024/08/06/great-CLI-in-2024/</id>
    <published>2024-08-06T11:46:34.000Z</published>
    <updated>2025-01-30T04:32:15.148Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.sa.net/2024/08/06/pHsOPr28IVQASbd.jpg" alt="linux.jpg"></p><p>推荐一些我常用的终端工具 CLI，相信总有一个款适合你。</p><span id="more"></span><h2 id="Zoxide"><a href="#Zoxide" class="headerlink" title="Zoxide"></a>Zoxide</h2><p><a href="https://github.com/ajeetdsouza/zoxide">https://github.com/ajeetdsouza/zoxide</a><br>Zoxide 是一款智能的 <code>cd</code> 命令行工具。它完全可以替代 <code>cd</code> ，并且能完成超出 <code>cd</code> 的功能，比如 <code>jump</code> ，快捷跳入。<br>当你只记得一些目录的关键词时，使用它可以立马进入，而不需要逐层进入。   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd</span></span><br><span class="line"><span class="built_in">cd</span> a/b/c/foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># zoxide</span></span><br><span class="line">z foo</span><br></pre></td></tr></table></figure><p>如果你使用过 zsh 的 <a href="http://z.sh/">z.sh</a> ，它们俩非常相似，但是 zoxide 的体验更好：   </p><ol><li>zoxide 使用 Rust 编写，性能、速度可靠   </li><li>zoxide 可以完全无感替代 <code>cd</code> ，并且支持路径补全</li></ol><p>现在它已经成为我使用最多的命令之一了，因为 <code>cd</code> 已经映射到zoxide。  </p><h2 id="EZA"><a href="#EZA" class="headerlink" title="EZA"></a>EZA</h2><p><a href="https://github.com/eza-community/eza">https://github.com/eza-community/eza</a>    </p><blockquote><p>对于 <code>ls</code>  来说一个更现代化的替代品。   </p></blockquote><p><img src="https://cdn.sa.net/2024/08/06/dlPXnm31cBfRhAG.png" alt="image.png"><br>可以给列出的资源加上丰富的图标和颜色，十分美观 。<br>而我在个人电脑上使用很简单的输出：   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> <span class="built_in">ls</span>=<span class="string">&#x27;eza --header --color=always --long --no-time --no-user --no-permissions --no-filesize --icons=always --group-directories-first&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="XCP"><a href="#XCP" class="headerlink" title="XCP"></a>XCP</h2><p><a href="https://github.com/tarka/xcp">https://github.com/tarka/xcp</a><br>没错，看名字都能发现是对 Unix 下 <code>cp</code> 命令的复刻。又是 Rust 写的，性能保证。<br>可以友好地展示复制的进度。<br><img src="https://cdn.sa.net/2024/08/06/jMLJfRhq3bACkcB.png" alt="image_7.png"></p><h2 id="Starship"><a href="#Starship" class="headerlink" title="Starship"></a>Starship</h2><p><a href="https://github.com/starship/starship">https://github.com/starship/starship</a>    </p><blockquote><p>奇快无比、随意搭配的 shell 提示符（prompt）工具   </p></blockquote><p><img src="https://cdn.sa.net/2024/08/06/4DtyGhUkwuSrF6b.png" alt="image_l.png"></p><p>似乎提到快，一定联想到 Rust，所有需要快的东西一定会被 Rust 重写。以往 C&#x2F;C++ 也是快的，但是没有人愿意这么做，足以说明 Rust 已经不仅仅是性能的优势，更有潮流的特性，吸引众多开发者趋之若鹜地重新开发一些已有的工具。<br><code>oh-my-zsh</code>  很好，有很丰富的插件，但是有时它太慢了。</p><h2 id="tldr"><a href="#tldr" class="headerlink" title="tldr"></a>tldr</h2><p><a href="https://github.com/tldr-pages/tldr">https://github.com/tldr-pages/tldr</a>    </p><blockquote><p>常见的终端实用命令手册   </p></blockquote><p><img src="https://cdn.sa.net/2024/08/06/O1C563qEacoANrx.png" alt="image_e.png"><br>工具实在太多了，难免会忘记一些参数。不如临时查查手册吧。📖   </p><h2 id="bandwhich"><a href="#bandwhich" class="headerlink" title="bandwhich"></a>bandwhich</h2><p><a href="https://github.com/imsnif/bandwhich">https://github.com/imsnif/bandwhich</a></p><blockquote><p>带宽监控工具</p></blockquote><p><img src="https://github.com/imsnif/bandwhich/raw/main/res/demo.gif" alt="image"></p><p>查看哪个进程在偷偷占用你的带宽。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.sa.net/2024/08/06/pHsOPr28IVQASbd.jpg&quot; alt=&quot;linux.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;推荐一些我常用的终端工具 CLI，相信总有一个款适合你。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://www.vatery.com/tags/Linux/"/>
    
    <category term="CLI" scheme="https://www.vatery.com/tags/CLI/"/>
    
  </entry>
  
  <entry>
    <title>提交第一个包到 AUR</title>
    <link href="https://www.vatery.com/2024/07/17/how-to-submit-first-package-to-aur/"/>
    <id>https://www.vatery.com/2024/07/17/how-to-submit-first-package-to-aur/</id>
    <published>2024-07-17T02:20:18.000Z</published>
    <updated>2025-01-30T04:32:15.148Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.sa.net/2024/07/17/H5oViWD91IGEdS8.png" alt="image.png"></p><p>用了几年 Arch Linux，最大的快乐之一就是来自于强大的 Arch User Repository(AUR) 社区，其拥有令人惊叹的多样性软件安装包，一键即可安装众多软件。</p><p>最近在使用一款 <a href="https://msty.app/">Msty</a> 的 AI 客户端，一个通过 Electron 技术打包的软件。官网提供了 AppImage 程序，Linux 下载后就能使用，但是每次更新安装都比较麻烦，而且 AUR 上没有提供这款软件的包，我便起了歹心想贡献一把。</p><span id="more"></span><h2 id="编写-PKGBUILD"><a href="#编写-PKGBUILD" class="headerlink" title="编写 PKGBUILD"></a>编写 PKGBUILD</h2><p><code>PKGBUILD</code> 文件是核心，包含了版本信息、资源管理、依赖管理、安装步骤等。</p><p>以下是我对 Msty AppImage 做的一份 <code>PKGBUILD</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># Maintainer: y-not-u &lt;voganwong@hotmail.com&gt;</span><br><span class="line"></span><br><span class="line">pkgbase=msty</span><br><span class="line">pkgname=msty-bin</span><br><span class="line">_pkgname=&quot;$&#123;pkgname%-bin&#125;&quot;</span><br><span class="line">pkgver=1.0.3</span><br><span class="line">pkgrel=1</span><br><span class="line">pkgdesc=&quot;The easiest way to use local and online AI models&quot;</span><br><span class="line">arch=(&#x27;x86_64&#x27;)</span><br><span class="line">url=&quot;https://msty.app&quot;</span><br><span class="line">license=(&#x27;custom&#x27;)</span><br><span class="line">depends=()</span><br><span class="line">options=(&#x27;!strip&#x27;)</span><br><span class="line">source=(&quot;$pkgname-$pkgver.AppImage::https://assets.msty.app/Msty_x86_64.AppImage&quot;</span><br><span class="line">    &quot;$_pkgname.desktop&quot;</span><br><span class="line">    &quot;$_pkgname.png&quot;)</span><br><span class="line">sha256sums=(&#x27;SKIP&#x27;</span><br><span class="line">            &#x27;SKIP&#x27;</span><br><span class="line">            &#x27;SKIP&#x27;)</span><br><span class="line">conflicts=(&quot;$_pkgname&quot;)</span><br><span class="line"></span><br><span class="line">package() &#123;</span><br><span class="line">    cd &quot;$srcdir&quot;</span><br><span class="line"></span><br><span class="line">    # Create directories</span><br><span class="line">    install -dm755 &quot;$pkgdir/usr/bin&quot;</span><br><span class="line">    install -dm755 &quot;$pkgdir/opt/$pkgname&quot;</span><br><span class="line">    install -dm755 &quot;$pkgdir/usr/share/applications&quot;</span><br><span class="line">    install -dm755 &quot;$pkgdir/usr/share/icons/hicolor/256x256/apps&quot;</span><br><span class="line"></span><br><span class="line">    # Install AppImage</span><br><span class="line">    install -Dm755 &quot;$pkgname-$pkgver.AppImage&quot; &quot;$pkgdir/opt/$pkgname/$pkgname.AppImage&quot;</span><br><span class="line"></span><br><span class="line">      # Install icon</span><br><span class="line">    install -Dm644 &quot;$_pkgname.png&quot; &quot;$pkgdir/usr/share/icons/hicolor/256x256/apps/$_pkgname.png&quot;</span><br><span class="line"></span><br><span class="line">      # Install desktop file</span><br><span class="line">    install -Dm644 &quot;$_pkgname.desktop&quot; &quot;$pkgdir/usr/share/applications/$_pkgname.desktop&quot;</span><br><span class="line"></span><br><span class="line">    # Symlink executable</span><br><span class="line">    ln -s &quot;/opt/$&#123;pkgname&#125;/$&#123;pkgname&#125;.AppImage&quot; &quot;$&#123;pkgdir&#125;/usr/bin/$&#123;_pkgname&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>source</code> 则代表包里携带的资源。 <code>AppImage</code> 文件从网络下载，而 <code>.desktop</code> 和 <code>icon</code> 文件则是仓库里我编写提交的。</p><p><code>package</code> 部分则是执行的安装步骤，分门别类的将文件放到其合理位置。</p><p>进一步了解可以查看仓库：<a href="https://github.com/y-not-u/Msty-AUR">https://github.com/y-not-u/Msty-AUR</a></p><p>在编写完成 <code>PKGBUILD</code> 之后，需要执行命令生成 <code>.SRCINFO</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">makepkg --printsrcinfo &gt; .SRCINFO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地测试安装</span></span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure><blockquote><p>每次更新 <code>PKGBUILD</code> 都需要重新生成 <code>.SRCINFO</code></p></blockquote><p>一切没问题后提交到仓库。</p><h2 id="提交到-AUR-仓库"><a href="#提交到-AUR-仓库" class="headerlink" title="提交到 AUR 仓库"></a>提交到 AUR 仓库</h2><p>Arch Linux 除了强大的 AUR 之外，另一个最大亮点即是它友好的文档。我在中文官方文档上找到了提交到 AUR 十分详细明了的步骤。</p><p><a href="https://wiki.archlinuxcn.org/wiki/AUR_%E6%8F%90%E4%BA%A4%E5%87%86%E5%88%99">AUR 提交准则 -  Arch Linux 中文维基</a></p><p>我总结了几个重要的步骤：</p><ol><li><p>注册 <a href="http://archlinux.org/">archlinux.org</a> 的账户</p></li><li><p>添加 ssh key 到账户里</p></li><li><p>git clone 想要提交的包地址，例如想创建的包名是 <code>awesome-example</code> 则是<br><code>git clone ssh://aur@aur.archlinux.org/awesome-example.git</code></p><p>因为没有这个包而会自动创建一个空的仓库，你需要把提交的文件都放入其中。</p></li><li><p>git push 前需要配置好 ssh Host User，不然推送验证不匹配</p></li></ol><p>最后检查成果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yay msty-bin</span><br><span class="line"><span class="comment"># 1 aur/msty-bin 1.0.3-1 (+0 0.00) (Installed)</span></span><br><span class="line"><span class="comment">#     The easiest way to use local and online AI models</span></span><br><span class="line"><span class="comment"># ==&gt; Packages to install (eg: 1 2 3, 1-3 or ^4)</span></span><br></pre></td></tr></table></figure><p>AUR 网址为：<a href="https://aur.archlinux.org/packages/msty-bin">https://aur.archlinux.org/packages/msty-bin</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.sa.net/2024/07/17/H5oViWD91IGEdS8.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;用了几年 Arch Linux，最大的快乐之一就是来自于强大的 Arch User Repository(AUR) 社区，其拥有令人惊叹的多样性软件安装包，一键即可安装众多软件。&lt;/p&gt;
&lt;p&gt;最近在使用一款 &lt;a href=&quot;https://msty.app/&quot;&gt;Msty&lt;/a&gt; 的 AI 客户端，一个通过 Electron 技术打包的软件。官网提供了 AppImage 程序，Linux 下载后就能使用，但是每次更新安装都比较麻烦，而且 AUR 上没有提供这款软件的包，我便起了歹心想贡献一把。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://www.vatery.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Vim 小技巧</title>
    <link href="https://www.vatery.com/2024/06/28/vim-tricks/"/>
    <id>https://www.vatery.com/2024/06/28/vim-tricks/</id>
    <published>2024-06-28T13:58:38.000Z</published>
    <updated>2025-01-30T04:32:15.148Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.sa.net/2024/06/28/R1QeGTmXFu9OVxg.png" alt="vim"><br>下面列出了一些 Vim 的小技巧，我很后悔没有及早知道，这里忍不住分享给大家。</p><span id="more"></span><h2 id="批量数字自增"><a href="#批量数字自增" class="headerlink" title="批量数字自增"></a>批量数字自增</h2><p>在开发过程中，有时候会遇到装填测试数字的场景，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>0. Placehoder text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>0. Placehoder text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>0. Placehoder text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>0. Placehoder text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>0. Placehoder text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在写好一个示例之后，要复制粘贴非常简单，执行 <code>yy</code> 即可，但是要更改其中的数字为自增的话，我以往都是傻不拉几的，按 <code>ctrl + a</code> 一个个改。</p><p>现在有更好的命令：</p><ol><li><code>shift + v</code> 选中需要自增数字的区块</li><li><code>g</code>, <code>ctrl + a</code> 立马完成</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1. Placehoder text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2. Placehoder text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3. Placehoder text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>4. Placehoder text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>5. Placehoder text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="选中状态下切换光标方向"><a href="#选中状态下切换光标方向" class="headerlink" title="选中状态下切换光标方向"></a>选中状态下切换光标方向</h2><p>通常在使用 <code>shift + v</code> &#x2F; <code>v</code> 选中之后，如果突然发现开头选中的太少了，需要扩大范围则需要取消重新选择，非常烦恼。一个新的技巧，在选中后按下 <code>o</code> 可以让光标在选中的开头和结尾之间切换。</p><h2 id="跳转到匹配的另一个括号"><a href="#跳转到匹配的另一个括号" class="headerlink" title="跳转到匹配的另一个括号"></a>跳转到匹配的另一个括号</h2><p>在光标移动到 <code>&#123;&#125;</code> 或 <code>[]</code> 或 <code>()</code> 等等任意成对出现的标点下时，可以使用 <code>%</code> 直接跳转到相匹配的另一个符号。同时也可以在 <code>v</code> 选中状态下，直接选中两个符号之内的内容。</p><h2 id="打开-URL-或者文件"><a href="#打开-URL-或者文件" class="headerlink" title="打开 URL 或者文件"></a>打开 URL 或者文件</h2><p>之前我还会装一个专门的插件，打开当前光标下的 URL，后来才知道可以直接使用 <code>gx</code> 来完成。<br>对于文件的打开，可以移动光标到文件名，然后使用 <code>gf</code> 来完成。</p><h2 id="需要临时回到命令行"><a href="#需要临时回到命令行" class="headerlink" title="需要临时回到命令行"></a>需要临时回到命令行</h2><p>有时候在编辑中需要临时回到命令行，可以使用 <code>Ctrl + z</code> 临时将 VIM 放置到后台，然后在终端中用 <code>fg</code> 来切换到前台。</p><h2 id="W-和-w"><a href="#W-和-w" class="headerlink" title="W 和 w"></a>W 和 w</h2><p>在进行光标的移动中，经常会用到 <code>w</code> 。 <code>w</code> 的作用是在单词或者标点符号之间移动跳跃，一旦中间有个标点，则会中断尤其恼人。类似 <code>var a = 3.111 * 1000</code> 则 <code>3.111</code> 在跳跃中会在 <code>.</code> 暂停，如果使用 <code>W</code> 则没问题啦！类似的还有 <code>C</code>&#x2F;<code>E</code>&#x2F;<code>B</code> ，只有遇到空格才当作分隔符，其余情况认为一个整体。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.sa.net/2024/06/28/R1QeGTmXFu9OVxg.png&quot; alt=&quot;vim&quot;&gt;&lt;br&gt;下面列出了一些 Vim 的小技巧，我很后悔没有及早知道，这里忍不住分享给大家。&lt;/p&gt;</summary>
    
    
    
    
    <category term="vim" scheme="https://www.vatery.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Corepack 怎么使用？</title>
    <link href="https://www.vatery.com/2024/06/08/what-is-corepack/"/>
    <id>https://www.vatery.com/2024/06/08/what-is-corepack/</id>
    <published>2024-06-08T09:49:58.000Z</published>
    <updated>2025-01-30T04:32:15.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Corepack"><a href="#什么是-Corepack" class="headerlink" title="什么是 Corepack"></a>什么是 Corepack</h2><p><img src="https://img.vatery.com/file/7e5b3a5699af7a718ac0a.png" alt="corepack"><br>Corepack 是一个将 Node.js 与“包管理器”绑定在一起的工具，能够更容易的指定使用的“包管理器”版本。 (<em>Corepack 已经从 Node.js 14.19 版本开始默认携带发布</em>)</p><p>那么我们需要使用 Corepack 吗？</p><span id="more"></span><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><ol><li>首先需要安装</li></ol><p>如果你使用 Node.js 14.19 版本之后，那么已经不需要额外安装。</p><p>下一步则是启用 Corepack：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">corepack <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置你的项目</li></ol><p>非常简单，只需要在项目的 <code>package.json</code> 中配置 <code>packageManager</code> 字段即可：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// npm</span></span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm@10.8.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// pnpm</span></span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pnpm@9.1.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// yarn</span></span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yarn@3.1.1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>⚠️ 提示：你必须指定明确的包管理器版本号，而不能指定一个范围。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 不能使用一个范围</span></span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm@^10.8.1&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不能指定为 &quot;latest&quot;</span></span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pnpm@latest&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不能不提供版本号</span></span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yarn&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="尝试一下吧"><a href="#尝试一下吧" class="headerlink" title="尝试一下吧"></a>尝试一下吧</h2><p>如果你在 <code>package.json</code> 内将 <code>packageManager</code> 配置为 <strong>pnpm</strong> ，执行 <code>pnpm install</code> 会提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Corepack is about to download https://registry.npmjs.org/pnpm/-/pnpm-9.1.4.tgz.</span><br><span class="line"></span><br><span class="line">Do you want to <span class="built_in">continue</span>? [Y/n]</span><br></pre></td></tr></table></figure><p>选择 <code>Y</code> 就会下载并使用指定版本的 pnpm。</p><h2 id="我们需要吗？"><a href="#我们需要吗？" class="headerlink" title="我们需要吗？"></a>我们需要吗？</h2><p>我觉得在自动化部署（CI&#x2F;CD）中非常值得尝试，可以便利快捷地使用指定的包管理器。因为当下包管理器也是百花齐放的状态， <code>npm</code> , <code>yarn</code> , <code>pnpm</code> , <code>bun</code> 都比较完善且各有特点，更多是由于开发者的个人喜好而选择，但是在自动化部署中还需要额外执行安装指令，略显繁琐。Corepack 能解决这一小小的痛点可以尝试下。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是-Corepack&quot;&gt;&lt;a href=&quot;#什么是-Corepack&quot; class=&quot;headerlink&quot; title=&quot;什么是 Corepack&quot;&gt;&lt;/a&gt;什么是 Corepack&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://img.vatery.com/file/7e5b3a5699af7a718ac0a.png&quot; alt=&quot;corepack&quot;&gt;&lt;br&gt;Corepack 是一个将 Node.js 与“包管理器”绑定在一起的工具，能够更容易的指定使用的“包管理器”版本。 (&lt;em&gt;Corepack 已经从 Node.js 14.19 版本开始默认携带发布&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;那么我们需要使用 Corepack 吗？&lt;/p&gt;</summary>
    
    
    
    
    <category term="nodejs" scheme="https://www.vatery.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>react 19 全新特性前瞻</title>
    <link href="https://www.vatery.com/2024/04/07/react-19/"/>
    <id>https://www.vatery.com/2024/04/07/react-19/</id>
    <published>2024-04-07T05:12:11.000Z</published>
    <updated>2025-01-30T04:32:15.148Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.vatery.com/file/9ca768cc146982be5c5be.png" alt="img"></p><p>近期 React 团队发布了最新的技术博客。兴奋地公布了他们已经准备好推出全新的 React Compiler。</p><span id="more"></span><h2 id="React-Compiler"><a href="#React-Compiler" class="headerlink" title="React Compiler"></a>React Compiler</h2><p>React Compiler 很好的解决了 React 项目的性能优化问题。以前我们写一些优化性的代码，必须引入 <code>useMemo</code> , <code>useCallback</code> , <code>memo</code> 来根据依赖项的改变，缓存已经计算过的数据。这给开发者的代码不仅增加了复杂度，而且开发者的心智负担也有明显增加。</p><p>React 团队了解这个问题，当时使用 <code>useMemo</code> 等方式也是一个妥协的解决方案，随着社区的呼吁声，React 团队着重解决了这个问题，研发 React Compiler 让框架能够自动判断是否需要优化并缓存，而开发者无须关注细节。</p><p>React 团队发布一项重大的、破坏性的功能之前，都会提前将新技术应用到生产环境中，保证其可行性。这点非常令普通开发者安心。本次 React Compiler 已经在 Instagram 线上使用。</p><p>博客地址：</p><p><a href="https://react.dev/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024">React Labs: What We’ve Been Working On – February 2024 – React</a></p><h2 id="New-React-Hooks"><a href="#New-React-Hooks" class="headerlink" title="New React Hooks"></a>New React Hooks</h2><h3 id="useMemo-useCallback-memo"><a href="#useMemo-useCallback-memo" class="headerlink" title="useMemo, useCallback, memo"></a>useMemo, useCallback, memo</h3><p>不再需要了！因为 React Compiler 已经可以自动判断并优化。</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>ref 可以当作一个 常规的 prop 通过 props 直接传输，而不需要 <code>forwardRef</code> 包裹。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">&#123; ref, children &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h3><p>新的 <code>use(Context</code> hook 将会替代 <code>useContext</code> 。</p><h3 id=""><a href="#" class="headerlink" title="&lt;Context.Provider&gt;"></a>&lt;Context.Provider&gt;</h3><p><code>Context</code> 将会替代 <code>&lt;Context.Provider&gt;</code> 。</p><h3 id="Promise-请求"><a href="#Promise-请求" class="headerlink" title="Promise 请求"></a>Promise 请求</h3><p>新的 <code>use(promise)</code> 将可以直接管理 promise 函数的处理。</p><h2 id="Server-components"><a href="#Server-components" class="headerlink" title="Server components"></a>Server components</h2><p>React 19 开始全面支持“服务端渲染”。</p><p>带来一系列的高级特性：</p><ul><li>SEO: 搜索引擎友好</li><li>启动速度：减少初始化渲染时间</li><li>服务端执行：可以在服务端执行一些API请求，提高执行效率。</li></ul><p>React 的组件默认是客户端侧的，当使用 <code>&#39;use server&#39;</code> 时才会作为服务端侧的组件。</p><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><p>主要针对 form 的增强，同时兼顾客户端侧&#x2F;服务端侧的逻辑处理。</p><p>例如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 19之前的版本</span></span><br><span class="line">&lt;form onSubmit=&#123;search&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;query&quot;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 19版本</span></span><br><span class="line"><span class="string">&quot;use server&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">submitData</span> = <span class="keyword">async</span> (<span class="params">userData</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newUser = &#123;</span><br><span class="line">  <span class="attr">username</span>: userData.<span class="title function_">get</span>(<span class="string">&#x27;username&#x27;</span>),</span><br><span class="line">  <span class="attr">email</span>: userData.<span class="title function_">get</span>(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newUser)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;submitData&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="Web-Components"><a href="#Web-Components" class="headerlink" title="Web Components"></a>Web Components</h2><p>“Web Components” 允许通过原生的 HTML, CSS, JavaScript 创建自定义的组件，目前该技术已经有一定的成熟性。</p><p>之前 React 是无法直接与 Web Components 直接进行结合的。但在 19 之后这会变得非常容易且优雅。</p><h2 id="Document-Metadata"><a href="#Document-Metadata" class="headerlink" title="Document Metadata"></a>Document Metadata</h2><p>在 HTML 中大家通常忽略了 “title”, “meta tags”, “description” 等元素。然而这些元素对搜索引擎的 SEO 有重大影响。</p><p>以前的 React 对这部分的控制很少，尤其是在路由跳转之后，变更上述的一些状态是很常见的。目前开发者通常会直接操作 Document 元素，或者使用一些第三方的包（如：react-helmet）来操作 meta 数据。</p><p>之后的操作方式：</p><p>可以在 React 中直接使用 <code>title</code> , <code>meta</code> 标签</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">HomePage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;bar&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Asset-Loading"><a href="#Asset-Loading" class="headerlink" title="Asset Loading"></a>Asset Loading</h2><p>React 或者说前端 UI 库中，资源加载一直是一个比较影响用户体验的点。19 版本优化了 stylesheets, fonts, scripts 的加载速度和展示上的体验。</p><p>另外提供了 <code>preload</code> 和 <code>preinit</code> 更好地控制资源的加载。</p><h2 id="React-Canary"><a href="#React-Canary" class="headerlink" title="React Canary"></a>React Canary</h2><p>“金丝雀”发布是 React 项目尝试的一种全新的开发流程。</p><p>以前新的特性只在 Meta 内部进行研究与开发，最后大众开发者会见到一个改变巨大的稳定版本。在实行金丝雀研发模式后，React 的开发会转变为公开。通过 React Labs 博客系列不停同步新的特性，然后收集来自社区的反馈。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.vatery.com/file/9ca768cc146982be5c5be.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;近期 React 团队发布了最新的技术博客。兴奋地公布了他们已经准备好推出全新的 React Compiler。&lt;/p&gt;</summary>
    
    
    
    
    <category term="React" scheme="https://www.vatery.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>2023年度macOS优秀App推荐</title>
    <link href="https://www.vatery.com/2024/02/23/2023-macos-great-apps/"/>
    <id>https://www.vatery.com/2024/02/23/2023-macos-great-apps/</id>
    <published>2024-02-23T14:31:12.000Z</published>
    <updated>2025-01-30T04:32:15.148Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.sa.net/2024/02/23/RETy4nDYdP7lqBX.png" alt="conver"><br>2023年我替换了不少已经熟悉的App，不乏有提高生产力的工具，也有提升娱乐的软件。<br>现在的App创意已然没有前些年的爆发力，但是交互体验和界面美观度确确实实有进步。<br>下面一起来看看我在2023年给你推荐的优秀App。</p><span id="more"></span><h2 id="Raycast"><a href="#Raycast" class="headerlink" title="Raycast"></a>Raycast</h2><blockquote><p>不止于应用启动器 免费✅ &#x2F; 付费💰</p></blockquote><p><a href="https://www.raycast.com/">https://www.raycast.com/</a></p><p><img src="https://cdn.sa.net/2024/02/23/IRmTu5S6tP9HLMw.png" alt="raycast"></p><p>当之无愧第一名！</p><p>作为尊贵的Alfred全款Mega永久授权用户，背叛并逃离到Raycast。接着就是真香。</p><ul><li>现代美观的UI</li><li>非常丰富的插件市场</li><li>免费（个人用户）</li><li>开发者友好（支持React编写UI）</li></ul><p>把Alfred和Raycast对比，如果说UI的重要性没有那么高，免费可能是第一要素。虽然说Alfred也有免费的功能，但是相对于Raycast免费默认全给的状态，实在是相形见绌。</p><p>我由于本来就是Alfred的付费用户，我更看重的则是插件市场。Alfred官方没有较好的运营插件市场。即使有很开放的API，以及Python、Shell、PHP等各类的语言的支持，但是整体的生态还是要有用户来建设的。但是非常多优秀的插件没有得到足够的推广，使得开发者积极性大大降低，我自用的许多插件都已经进入了停止维护阶段。想要寻找替代的插件，但是寥寥可数。</p><p>个人推荐的插件：</p><ul><li>Bitwarden Vault # 搜索密码</li><li>Douban # 搜索电影、图书</li><li>Easy Dictionary # 聚合翻译</li><li>Clipboard History # 剪贴板记录</li><li>Floating Notes # 便捷记事贴</li><li>Kill Process # 杀死进程</li><li>Quit Applications # 退出程序</li><li>Lorem Lpsum # 生成随机填充字符</li><li>Music # Apple Music 添加喜爱、下一首</li><li>Spotify Controls # Spotify 播放、暂停、下一首</li><li>Notion # 快速搜索、创建 Page</li><li>Search RegExp # 搜索常用正则表达式</li><li>Search npm Packages # 搜索npm包</li><li>Tailwind CSS # 一步查找用法、颜色</li><li>Timers # 快速开启一个定时器</li><li>Year in Progress # 看看你今年的进度</li><li><a href="http://ray.so/">ray.so</a> # 创建美观的代码截图</li></ul><h2 id="Arc-Browser"><a href="#Arc-Browser" class="headerlink" title="Arc Browser"></a>Arc Browser</h2><blockquote><p>次世代浏览器 免费✅</p></blockquote><p><a href="https://arc.net/">https://arc.net/</a></p><p><img src="https://cdn.sa.net/2024/02/23/r97IYAXlmTqZPJt.png" alt="arc"><br>在我体验过垂直标签后，真的回不去了。</p><p>虽然Edge也有垂直标签功能，但总是缺点什么，易用性。例如要钉住一个网页，图标非常小，有时候很难看清icon代表的什么网站。</p><p>Edge有标签页，有集锦，有书签，分开的体验非常割裂。而Arc则都放在了左侧边栏。动画、触控板手势温润优雅。</p><p>加上工作空间能够调制任意的色彩，真的体验飞升。</p><h2 id="Poe"><a href="#Poe" class="headerlink" title="Poe"></a>Poe</h2><blockquote><p>AI的集合站 免费✅ &#x2F; 付费💰</p></blockquote><p><a href="https://poe.com/">https://poe.com</a></p><p><img src="https://cdn.sa.net/2024/02/23/8KdZ1rFAYDV3PO4.png" alt="poe"></p><p>2023真的是AI爆发的元年，如果你还不知道AI，那肯定是落伍了。</p><p>市面上AI模型百花齐放，但是最数易用及好用的，则是OpenAI的模型。在poe中ChatGPT 3.5是完全免费的。另外接入了其他各大模型，随意切换。ChatGPT 的答案不满意，再问问 Claude 比对下，或者和 Google 的 Gemini 随意聊聊。</p><h2 id="Wins"><a href="#Wins" class="headerlink" title="Wins"></a>Wins</h2><blockquote><p>窗口管理 付费💰</p></blockquote><p><a href="https://wins.cool/">https://wins.cool/</a></p><p><img src="https://cdn.sa.net/2024/02/23/Il3qALxTeJz4yCr.png" alt="wins"></p><p>直观的操作，我看灵感应该是完全来自于Windows🤣，甚至名字都有影子。</p><h2 id="VidHub"><a href="#VidHub" class="headerlink" title="VidHub"></a>VidHub</h2><blockquote><p>新时代网盘影音播放器 免费✅</p></blockquote><p><a href="https://zh.okaapps.com/product/1659622164">https://zh.okaapps.com/product/1659622164</a></p><p><img src="https://cdn.sa.net/2024/02/23/amqwtLHQEj8e5lM.png" alt="vidhub"></p><p>这也是一款顺利令我从Infuse付费用户转向的App，且毫不犹豫。</p><p>国人开发，对接的资源库丰富，更新频繁，阿里云盘扫描贼快。</p><p>不是说Infuse不好，只是以前没有对手。现在对手来了，就是VidHub。虽然说VidHub缺少杜比视界等高端功能，但是在路上了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.sa.net/2024/02/23/RETy4nDYdP7lqBX.png&quot; alt=&quot;conver&quot;&gt;&lt;br&gt;2023年我替换了不少已经熟悉的App，不乏有提高生产力的工具，也有提升娱乐的软件。&lt;br&gt;现在的App创意已然没有前些年的爆发力，但是交互体验和界面美观度确确实实有进步。&lt;br&gt;下面一起来看看我在2023年给你推荐的优秀App。&lt;/p&gt;</summary>
    
    
    
    
    <category term="macOS" scheme="https://www.vatery.com/tags/macOS/"/>
    
    <category term="App" scheme="https://www.vatery.com/tags/App/"/>
    
  </entry>
  
  <entry>
    <title>2024年度计划</title>
    <link href="https://www.vatery.com/2023/12/24/annual-plan-for-2024/"/>
    <id>https://www.vatery.com/2023/12/24/annual-plan-for-2024/</id>
    <published>2023-12-24T15:42:28.000Z</published>
    <updated>2025-01-30T04:32:15.148Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1501504905252-473c47e087f8?ixid=M3w1NDQ0ODJ8MHwxfHNlYXJjaHw5fHxuZXclMjB5ZWFyfGVufDB8MHx8fDE3MDQwMDU4NjJ8MA&ixlib=rb-4.0.3" alt="image"><br>新的一年计划，必然更进一步。</p><span id="more"></span><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><h3 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h3><ul><li><input disabled="" type="checkbox"> 沙丘 六部曲</li><li><input disabled="" type="checkbox"> 长安的荔枝</li><li><input disabled="" type="checkbox"> 人生海海</li><li><input disabled="" type="checkbox"> 银河系漫游指南</li></ul><h3 id="财经"><a href="#财经" class="headerlink" title="财经"></a>财经</h3><ul><li><input disabled="" type="checkbox"> 杰西利弗摩尔的 大作手回忆录</li><li><input disabled="" type="checkbox"> 日本蜡烛图技术</li><li><input disabled="" type="checkbox"> 新威科夫操盘法</li><li><input disabled="" type="checkbox"> 笑傲股市</li></ul><h3 id="社科"><a href="#社科" class="headerlink" title="社科"></a>社科</h3><ul><li><input disabled="" type="checkbox"> 沸腾十五年：中国互联网1995—2009</li><li><input disabled="" type="checkbox"> 影响力</li><li><input disabled="" type="checkbox"> 枪炮、病菌与钢铁</li></ul><h3 id="家庭教育"><a href="#家庭教育" class="headerlink" title="家庭教育"></a>家庭教育</h3><ul><li><input disabled="" type="checkbox"> 真希望我父母度过这本书</li></ul><h3 id="传记"><a href="#传记" class="headerlink" title="传记"></a>传记</h3><ul><li><input disabled="" type="checkbox"> 穷查理宝典</li><li><input disabled="" type="checkbox"> 原则</li></ul><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><ul><li><input disabled="" type="checkbox"> 学习新概念英语2-3册</li></ul><h2 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h2><ul><li><input disabled="" type="checkbox"> 骑行上下班</li><li><input disabled="" type="checkbox"> 引体向上10个</li><li><input disabled="" type="checkbox"> 俯卧撑20个</li></ul><h2 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h2><h3 id="电影电视"><a href="#电影电视" class="headerlink" title="电影电视"></a>电影电视</h3><ul><li><input disabled="" type="checkbox"> 沙丘</li><li><input checked="" disabled="" type="checkbox"> 伯德小姐</li><li><input disabled="" type="checkbox"> 三峡好人</li></ul><p>持续更新中…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1501504905252-473c47e087f8?ixid=M3w1NDQ0ODJ8MHwxfHNlYXJjaHw5fHxuZXclMjB5ZWFyfGVufDB8MHx8fDE3MDQwMDU4NjJ8MA&amp;ixlib=rb-4.0.3&quot; alt=&quot;image&quot;&gt;&lt;br&gt;新的一年计划，必然更进一步。&lt;/p&gt;</summary>
    
    
    
    
    <category term="plan" scheme="https://www.vatery.com/tags/plan/"/>
    
    <category term="2024" scheme="https://www.vatery.com/tags/2024/"/>
    
  </entry>
  
  <entry>
    <title>2023年度总结</title>
    <link href="https://www.vatery.com/2023/12/23/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://www.vatery.com/2023/12/23/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</id>
    <published>2023-12-23T15:59:32.000Z</published>
    <updated>2025-01-30T04:32:15.148Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1518082049942-62a4e31b18d3?ixid=M3w1NDQ0ODJ8MHwxfHNlYXJjaHwxfHxhbm51YWwlMjBwbGFufGVufDB8MHx8fDE3MDMzNTA0MDF8MA&ixlib=rb-4.0.3"></p><p>临近2023年末，和以往有些不一样。</p><p>可能是自己有史以来提升最多的一年，所以值得好好纪念。<br>之前分别定了健身、阅读、英语和计算机技术方面的几个目标，目前回顾基本可以算达到了80%。🎉</p><span id="more"></span><p>说来惭愧，以往都没有过明确的计划，每年得过，最终一事无成。<br>在2023年初时，对自己定下了一些目标，每天给自己的todo list中添加任务。没想到贵在坚持，居然完成了不少最初的计划。在此要简单地感谢下things3，😄能鞭策我去清空一个个task。</p><h2 id="计划盘点"><a href="#计划盘点" class="headerlink" title="计划盘点"></a>计划盘点</h2><p>下面简单盘点下计划完成情况：</p><p>在2023年初的计划中，大概分了4大类。分别是工作技能、锻炼、英语、阅读及写作。接下来也是按照这几个方面开始。</p><h3 id="工作技能"><a href="#工作技能" class="headerlink" title="工作技能"></a>工作技能</h3><p>✅ Swift<br>⚠️ <del>Rust</del><br>⚠️ <del>Python</del></p><p>起初学习Swift是通过斯坦福的cs课程，但是学到一半觉得太枯燥而放弃。最后还是通过制作项目快速上手，边做边查边学才上手的。但是目前发现SwiftUI的学习难度着实不低。或许也是iOS开发的难度不低吧。要制作优美设计、动感交互的需要非常多的奇技淫巧，而网络上的教程大多是比较简单的入门，仅仅做了一些API的Demo。</p><p>而Rust与Python没过多久就决心放弃深入学习。Rust是一个高级的系统级编程语言，总感觉它很Cool，但冷静下来后发现我目前的技术栈是不需要Rust的。而且Rust的学习曲线非常陡峭，如果后边没有经过大量编写用例而运用的话，很容易手生。Python类似，本身是一种脚本语言，在Linux上用来执行一些任务时可以快速编写。但是没必要特别去学，而是需要用到时再查询吧。</p><h3 id="锻炼"><a href="#锻炼" class="headerlink" title="锻炼"></a>锻炼</h3><p>✅ 15个俯卧撑</p><p>这是读过《微习惯》一书后兴起的念头。慢慢地从刚开始1个增加练习到15个。第一次完成15个时，高兴了很久，没想到自己能做到。</p><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>✅ 赖世雄美语音标<br>✅ 多邻国 250天连胜<br>❌ 旋元佑文法</p><p>英语一直是心中的执念。可是每每想要用心学习而有所成效时，总是打退堂鼓。这次也是一样，给自己定了一个稍稍轻松的任务，但最后也仅仅完成了一个音标的重新学习。<br>或许2024年能有更好的表现？</p><h3 id="阅读及写作"><a href="#阅读及写作" class="headerlink" title="阅读及写作"></a>阅读及写作</h3><p>一共看完了 <strong>14</strong> 本书，其实不止，沙丘6部曲中的前2部就没算进去，准备将整套一道读完放入2024年。</p><h4 id="传记"><a href="#传记" class="headerlink" title="传记"></a>传记</h4><p>✅ 乔布斯传<br>✅ 硅谷钢铁侠：埃隆马斯克的冒险人生</p><h4 id="虚构小说"><a href="#虚构小说" class="headerlink" title="虚构小说"></a>虚构小说</h4><p>✅ 绿毛水怪<br>✅ 美丽新世界<br>✅ 大樟树下烹鲤鱼</p><h4 id="社会"><a href="#社会" class="headerlink" title="社会"></a>社会</h4><p>✅ 蛤蟆先生去看心理医生<br>✅ 别独自用餐<br>✅ 激荡四十年：中国企业1978-2018</p><h4 id="工作及方法论"><a href="#工作及方法论" class="headerlink" title="工作及方法论"></a>工作及方法论</h4><p>✅ 微习惯<br>✅ 做对产品<br>✅ 卡片笔记写作法<br>❌ Unix编程艺术</p><h4 id="创业"><a href="#创业" class="headerlink" title="创业"></a>创业</h4><p>✅ 如何开一家小而美的店</p><h4 id="金融"><a href="#金融" class="headerlink" title="金融"></a>金融</h4><p>❌ 笑傲股市<br>✅ 彼得林奇的成功投资<br>✅ 长期投资<br>⚠️ <del>手把手教你读财报</del> (实在枯燥无趣)</p><h4 id="写作20篇blog"><a href="#写作20篇blog" class="headerlink" title="写作20篇blog"></a>写作20篇blog</h4><p>⚠️ 9篇 <a href="/archives">列表</a></p><p>实在高估自己了，哈哈，内容的输入远比自己想象的难。自己远比想象的懒。🥲</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>尤其让我惊喜的是，在年末12月的时候，能够有机会进入新的一家公司。各方面都还挺满意。</p><h2 id="2024年展望"><a href="#2024年展望" class="headerlink" title="2024年展望"></a>2024年展望</h2><p>肯定有一篇新的计划，那会有详细的内容。这里简单透露下，对自己更高要求吧。</p><p>与君共勉！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1518082049942-62a4e31b18d3?ixid=M3w1NDQ0ODJ8MHwxfHNlYXJjaHwxfHxhbm51YWwlMjBwbGFufGVufDB8MHx8fDE3MDMzNTA0MDF8MA&amp;ixlib=rb-4.0.3&quot;&gt;&lt;/p&gt;
&lt;p&gt;临近2023年末，和以往有些不一样。&lt;/p&gt;
&lt;p&gt;可能是自己有史以来提升最多的一年，所以值得好好纪念。&lt;br&gt;之前分别定了健身、阅读、英语和计算机技术方面的几个目标，目前回顾基本可以算达到了80%。🎉&lt;/p&gt;</summary>
    
    
    
    
    <category term="2023" scheme="https://www.vatery.com/tags/2023/"/>
    
    <category term="plan" scheme="https://www.vatery.com/tags/plan/"/>
    
  </entry>
  
</feed>
